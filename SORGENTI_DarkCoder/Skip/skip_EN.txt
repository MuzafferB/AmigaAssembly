
How to use the SKIP instruction in Copper, by The Dark Coder.

The SKIP instruction causes Copper to skip the next instruction if the
electronic brush has passed the specified position. For example, consider
the following instructions:

dc.w    $4037,$ffff    ; SKIP (skip) if line $40 is passed
ISTR1:    dc.w    $182,$0456    ; copper move instruction
ISTR2:    dc.w    $182,$0fff    ; copper move instruction

When the copper executes the SKIP instruction, it checks where the electronic brush is.
 If it has passed the specified position (in the example X=$36
and Y=$40), it skips the following instruction (at address ISTR1) and executes
the next instruction after it (i.e. the instruction at address ISTR2).
If, on the other hand, the electronic brush has not yet reached the specified position,
 the next instruction is executed normally as if SKIP were not there.

SKIP can be used to create loops in the copperlist. A loop in the
copperlist is a set of copper instructions that is repeated until 
the electronic brush reaches a certain position. To create
the loop, the COP2LC register is also used. The mechanism is illustrated by the
following example:

in the main programme, a

move.l    #Copperloop,$dff084    ; writes the address of the loop
; in the COP2LC register

and the following instructions are placed in the copperlist:

dc.w    $2007,$FFFE    ; WAIT line $20
Copperloop:
dc.w    $180,$F00    ; copper instructions of the loop
dc.w    $180,$0F0
dc.w    $180,$00F

.
.

dc.w    $180,$F0F    ; last instruction of the loop
dc.w    $4007,$ffff    ; SKIP (skip) if line $40 is exceeded
dc.w    $8a,0        ; COPJMP2 jumps to the beginning of the loop

dc.w    $182,$00F    ; instruction outside the loop

The operation is very simple. After line $20, the copper enters the loop
After executing all the instructions in the loop, it will arrive at SKIP. At this
point, if the electronic brush has NOT yet passed line $40 (i.e. it is
higher up on the screen), the copper will NOT skip the following instruction.
However, the following instruction writes to COPJMP2 causing the copper to jump
to the address written in COP2LC, i.e. to the address of the first instruction
of the loop. In this way, the loop is repeated. After a certain number of
repetitions, the electronic brush will reach the $40 line. At this point
,
 when SKIP is executed again, it will cause the copper to jump
to the instruction that writes to COPJMP2; in this way, it no longer jumps
to the beginning of the loop but goes on to execute the first instruction outside the loop.

What are loops used for in the copperlist? It is clear that we can always do without them
: instead of looping, we write the part of the copperlist to be repeated as many times as we need.
 This saves us the SKIP and 
the instruction that writes to COPJMP2, which slow down the copper a little.
However, the use of loops has advantages: first, we save
memory because we only write the copperlist piece once. Second,
 if the repeated copperlist piece needs to be modified by the processor
to achieve some effect, naturally, by looping, the copperlist piece
will only need to be modified once, greatly speeding up
the processor's work.

The use of WAIT instructions within loops presents some minor problems.
Suppose we have a loop that repeats from line $20 to line $70, and
that within the loop there is a WAIT at line $38. What happens?
The first time the loop is executed, the WAIT blocks the copper.
After line $38, the copper unblocks, reaches the end of the loop and repeats it.
At this point, since the electronic brush has passed line $38, the WAIT no longer blocks the copper. As a result, the execution of the first iteration of the loop will produce results very different from the subsequent iterations.
Usually this is not what you want.
In loops with copper, it would be desirable to be able to wait for a specific line of the loop at each iteration. For example, you might want something like this: CopperLoop: ; various instructions wait 4 lines
 
In loops
with the copper, it would be desirable to be able to wait for a specific line
of the loop at each iteration. For example, you might want something like
this:

CopperLoop:
; various instructions

wait 4 lines from the start of the iteration

; various instructions

repeat the loop until a certain line.

How can such a mechanism be achieved? It is necessary to use
WAIT with some bits of the vertical position masked.
For example, suppose we have a loop that extends over 16 raster lines
and we want to repeat it from line $10 to line $70, i.e. for 96 lines.
Since 96/16=6, the copper will execute 6 iterations. Note that 96 is divisible
by 16 (there is no remainder), which means that the electronic brush
will reach line 96 exactly when the copper finishes
the sixth iteration. We want the copper to
stop at the fourth line from the start of the iteration in each iteration of the loop. To achieve
this, we use a WAIT in which we mask the most significant bits of the
vertical position. In this case, since the loop repeats every 16 lines,
the WAIT must behave in the same way every 16 lines, and must not
consider the position differences between one group of 16 lines and another.
Therefore, only the 4 least significant bits (which form
a group of 16 lines) need to be considered. To mask the vertical position bits,
 we act on the second word of the WAIT:

dc.w    $0301,$0FFE

This instruction waits for the fourth line of a group of 16 lines.
Let's see what happens in our example. The loop starts at line $20.
The copper executes the first instructions and encounters WAIT. It considers
only the 4 least significant bits of the position, so it waits
for a line that has those 4 bits at value $3. This happens at line $23. At this
point, the copper unlocks. The second iteration of the loop starts at line
$30. Here too, the copper reaches the WAIT and waits for a line that has the 4 least significant bits
at the value $3, which happens at line $33, i.e. again
at the fourth line of the loop. This behaviour is repeated at each subsequent
iteration. If we wanted 8-line iterations with WAITs of
this type, we would have to leave only the 3 least significant bits of the
position enabled. Note that this technique is easy to implement only if the
length of an iteration is a power of 2.

An example is in lezioneskip.s

A limitation to the use of WAIT in the manner we have shown is due to
the fact that the most significant bit of the vertical position is not
masking. This prevents us from creating loops that behave in the
same way both above line $80, where the most significant bit
is 0, and below, where the most significant bit is 1, precisely
because we cannot ignore this difference by masking the bit.
The only solution is to make two loops, one to be executed above $80
and one below, as shown in lezioneskip2.s
