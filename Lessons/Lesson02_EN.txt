
ASSEMBLER COURSE - LESSON 2

Do you understand exactly how the source code in LESSON1a.s works?
If you don't, then you need to see a neurologist and quit the course.

Now let's take a closer look at the 68000 language. I wanted to anticipate
with the first source code that the processor is roughly used to
organise everything, but that on its own it only changes values
in its memory; by placing certain values in particular areas of memory
such as $dffxxx or $bfexxx, power is supplied to the pins of the graphics,
sound and port chips, and as a result, as in the previous example,
 you can change the colour of the screen, or by reading these locations,
 you can know which line the electronic brush has reached or whether the
mouse button is pressed. To make a game or demo, you need to use a large
number of these addresses, called REGISTERS, and therefore you need to know them
at least as well as the 68000 language (MOVE, JSR, ADD, SUB, etc.) with which they are
set.
For this type of programming, as I have already mentioned, the LIBRARIES
of the kickstart ROM 1.2/1.3/2.0/3.0 (i.e. its routines or subprogrammes
that allow you to open a workbench window or read a file, for example)
are used very little: for example, to avoid crashing the
workbench or to disable multitasking.
I therefore consider it necessary in this lesson no. 2 to explore the use of the
68000 in more depth, once its role has been understood.

The most important thing to learn is how the processor addresses,
 rather than the commands themselves. Once you have learned that,
every command uses the same syntax for addressing and you just need to know
what the command does. We have already said that the processor operates on
memory, which is divided into locations or addresses, whose unit of measurement
is the byte, and usually the address is in hexadecimal format, i.e. in
a numerical format different from the decimal one, as it has a base of 16.
This is not a problem at all: while with decimal numbers, a
sequence of 30 numbers, for example, is: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 etc.,
in hexadecimal it is 1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,10,11,12,13,14,15,16,17,18,
19,1a,1b,1c,1d,1e etc., i.e. in hexadecimal numbers the first
6 letters of the alphabet, as if a were a 10, b an 11, and so on; to convert
a number from hexadecimal to decimal or vice versa, simply use the ‘?’ command
in the ASM: for example, typing ‘?10000’ will give you $2710, the corresponding
hexadecimal value (hexadecimal numbers begin with $, decimal numbers
are not preceded by anything and binary numbers are preceded by a %). Hexadecimal numbers
are used because they are closer to the way computers think, which is
obviously BINARY, i.e. composed of only 0 and 1.
As an example to begin to understand the various addressing modes of the 68000,
 we will use the CLR command, which clears the specified memory location:

CLR.B    $40000        ; remember the difference between .B, .W and .L?

This instruction will “clear”, i.e. reset byte no. $40000, i.e.
address $40000. This is the simplest case, known as ABSOLUTE; i.e.
the address where the CLR is to be performed is indicated directly; in the assembler,
LABELS are used to identify a point in the program, in
which there may be, for example, a byte to be indicated: in this case, instead of
writing the address, we will write the name of the LABEL; the assembler will then
write the actual address of the byte in question: for example, if
we modify our first listing as follows:

Waitmouse:
move.w    $dff006,$dff180    ; put the value of $dff106 in $dff180
; i.e. the VHPOSR in COLOR0
btst    #6,$bfe001    ; left mouse button pressed?
bne.s    Waitmouse    ; if not, return to waitmouse and repeat
; (.s is equivalent to .b for this
; type of command: bne.s = bne.b)
clr.b    data1        ; RESET DATA1
rts            ; exit

data1:
dc.b    $30    ; dc.b means STORE THE FOLLOWING BYTE IN MEMORY
; in this case, a $30 is placed under data1:

Before exiting with RTS, the byte marked with the label
data1: would be reset, which would be allocated during the assembly (or compilation) phase
to a specific absolute address, for example if the program
were assembled by ASMONE starting from $50000, a CLR.B $5001c would be found in memory
after assembly, i.e. the real address of dato1: ,
and certainly not CLR.B DATO1, since dato1: is a name given by the programmer to
mark the dc.b $30; From this, we can also see the usefulness of labels,
because if we had to write the listing indicating the numerical address
every time, if we added a routine in the middle of the
program, we would have to rewrite all the addresses. To see at which
address the labels are assembled, just use the ASMONE command D:
for example, after assembling LESSON1a.s by doing ‘D waitmouse’, you will get the
disassembled memory starting from waitmouse, and the labels will not appear in the listing,
 but the real addresses.

In the course example sources, you will notice that numerical addresses are never indicated,
 only LABELS, apart from special addresses such as $dffxxx or $bfexxx.
In the last example, I used a dc.b, which is an assembler command that
is used to insert defined bytes; for example, to insert $12345678 at
a given point in the programme, I will have to use the DC command, and I can use it
in three forms: .B (BYTE), .W (WORD) and .L (LONGWORD):

dc.b    $12,$34,$56,$78    ; in bytes

dc.w    $1234,$5678    ; in words

dc.l    $12345678    ; in longwords

This command is also used to put phrases in memory, for example
to put in the listing the text that will be printed on the screen by a
PRINT routine that prints what is at the label TEXT:

TEXT:
dc.b    ‘best regards’

or:
dc.b    'best regards

The text is usually terminated with a zero:

dc.b    ‘best regards’,0

Remember to put the text in quotation marks and use dc.b,
not dc.w or dc.l!! The characters are one byte long each, and
correspond to a certain byte: for example, try ?‘a’ , and you will see
that it corresponds to $61, so writing dc.b ‘a’ will be equivalent to
writing dc.b $61. Be careful that capital letters have different values!
An ‘A’, for example, is $41. The most common use of dc.b is to define
bytes, words, or larger areas where data will be stored. For example
if you wanted to write a program that records the number of times a certain key is pressed,
 you would need to define a label followed, for example, by a zeroed byte,
 and each time you would add 1 to that label with the ADD command,
i.e. to that byte under the label, and at the end you would simply read the value
of the byte:

; if the key is pressed then ADDQ.B #1,NUMPREMUTO, i.e.
; add one to the byte under the label numpremuto.

NUMPREMUTO:
dc.b    0

At the end of the program, the initial 0 will be changed to the number of times
the key has been pressed. A similar example is in LESSON2a.s, which
also contains extensive comments. I recommend loading it into another
text buffer: to select one of the 10 available, just press a
key from F1 to F10. For example, if you have LESSON2.TXT in the F1 buffer,
press F2 and load LESSON2a.s with the ‘R’ command. You can then
load LESSON2b.s and the following files into buffers F3, F4, etc., so that you
always have them available by pressing a single key; however, it is better if you follow
the TEXT.LESSON, and as you find the source example,
continue loading it into another buffer, executing it and checking it,
then go back to reading the LESSON where you left off: I think this
is the best way to learn, because you do a bit of theory and
check it straight away.

Have you read the comments in LESSON2a.S?

You will have seen the importance of bytes, words and longwords:
as far as binary is concerned, to count bits, you start from the right and
go to the left, in other words “backwards”, and you start from 0, not 1, so
a byte (which has 8 bits) starts at 0 and goes up to 7. For example, in this number:

%000100010000

Bits 4 and 8 are “on”. To help you number them, you can do this:

;5432109876543210    - a clever use of ;
move.w #%0011000000100100,$dffxxx

In this case, bits 2, 5, 12 and 13 of the WORD are “on”.
Remember that a byte has 8 bits, a word has 16 (from 0 to 15), and a longword has
32 (from 0 to 31).
In the instruction

BTST #6,$bfe001

the system checks whether bit 6 of byte $bfe001 is set to zero: if it is:

;76543210
%0100000

bit 6 is set to 1, so the mouse is not pressed!!!

To recap, a BYTE is made up of 8 bits: to indicate them, the first on the right
is bit 0, also called the LEAST SIGNIFICANT BIT. The numbering proceeds from
right to left up to 7 (i.e. the eighth because we start from 0 instead of
1: 01234567, i.e. 8 bits); bit 7 is called the MOST SIGNIFICANT BIT.
It is more significant because it counts more in the same way that
in a hundred thousand pound note, the one to the left of the zeros on the right counts more.
A
A byte can have a maximum value of 255, i.e. %11111111.

A WORD, on the other hand, consists of 16 bits, or two bytes, in the same way starting
from the right with bit 0, always the least significant, up to bit 15 on the
left, the most significant. It can contain a maximum of 65535.

A LongWord is made up of 32 bits, from 0 to 31, i.e. 4 bytes, or 2 words, or if
you prefer, one word and 2 bytes, in short, always 32 bits attached to each other
which can contain a maximum of 4294967299 (4 billion!! like the lottery!).

Now we will proceed with different ways of addressing: we have seen that if
we do, for example, a CLR.W $100, we will reset locations $100 and $101,
i.e. a word starting from $100 (since a word is 2 bytes, and locations
are divided into bytes, we will clear 2 bytes!). Similarly, a MOVE.B $100,$200
will copy the contents of $100 to $200. This can also be indicated with
LABELS instead of specifying the address, for example MOVE.B LABEL1,LABEL2,
which copies the byte from LABEL1 to LABEL2. However, there are also different ways
of addressing. In fact, I can do a MOVE.L #$50000,LABEL2, i.e. put
a FIXED value in LABEL2. If, for example, LABEL2 were at address $60000,
we would move the value $00050000 to $60000, i.e. the bytes by doing M $60000:
00 05 00 00. In fact, when there is a hash symbol (#) before
a number or a label, it means that a set value is being moved,
and not the value contained in the address indicated by that value, as
is the case if there are no hash symbols before the number or LABEL.
For example, let's analyse these two cases:

1)    MOVE.L    $50000,$60000    ; the value contained in the memory addresses
; $50000,$50001,$50002,$50003
; is copied to $60000,
; $60001,$60002,$60003, i.e. a longword
; consisting of 4 bytes is copied from one
; address to another.

2)    MOVE.L	#$50000,$60000    ; This time, the number indicated after the hash sign, i.e. $50000, is placed in $60000.
Note that this time the address $50000 is not read
and is completely irrelevant; only $60000 is involved.
If labels are used, there are no changes:
1)    MOVE.L DOG,CAT

If labels are used, there are no changes:

1)    MOVE.L    DOG,CAT    ; The contents of the longword dog, i.e.
; $00123456, are copied to the longword
; CAT (in fact, $123456 is the first thing
; under the label DOG)

before the instruction:

DOG:
dc.l    $123456

CAT:
dc.l    0

after the instruction:

DOG:
dc.l    $123456

CAT:
dc.l    $123456

2)    MOVE.L    #DOG,CAT    ; This time, the ADDRESS of the label
; DOG is copied to the label CAT

before the instruction:    ; LET'S ASSUME THAT THE LABEL DOG: is at location
; $34500, i.e. by doing an M DOG after assembling
; the following appears:
; 00034500 00 12 34 56 00 00 00 00 .....
; (dog) (cat)

DOG:
dc.l    $123456

CAT:
dc.l    0

after the instruction:

DOG:
dc.l    $123456

CAT:
dc.l    $34500    ; i.e. WHERE THE DOG LABEL IS IN MEMORY.

Note that if you did a MOVE.W #DOG,CAT or a MOVE.B #DOG,CAT
the assembler would give an error, because an ADDRESS is long
a LONGWORD. In memory, a MOVE.L #LABEL,LABEL is transformed into an instruction
of the type MOVE.L #$12345,$12345, i.e. the assembler writes the real address
in place of the labels. You can verify this with LESSON2b.s.

Now we will deal with other types of addressing with registers (which are more
difficult); as I mentioned earlier, there are 8 data registers and 8 address registers
: D0, D1, D2, D3, D4, D5, D6, D7 are the DATA registers, while
a0, a1, a2, a3, a4,a5, a6, a7 are the address registers. I should point out that the register
A7 is also called SP or STACK POINTER, and is a special register that
we will discuss later, so consider using only the address registers up to
a6. These addresses are each one longword long, and are basically
a small memory inside the 68000, which is consequently very fast.
Various things can be done using the registers; in fact, there is a special syntax
for registers. First of all, you cannot work in bytes
with ADDRESS registers: for example, a move.b LABEL,a0 gives an error message
. With the address registers a0, a1, etc., you can therefore work with
longwords or words. With the data registers D0, D1, etc., on the other hand, you can use
both .b and .w and .l. Address registers are dedicated to containing addresses,
and have dedicated commands, such as LEA, which means LOAD ENTIRE ADDRESS,
i.e. load the entire address into the register (in fact, this command cannot
be lea.b, lea.w or lea.l, but only LEA, always being .L)
For example, to put a value in the address registers, you can use
2 methods:

1)    MOVE.L    #$50000,A0    (or MOVE.L #LABEL,a0)

2)    LEA    $50000,a0    (or LEA LABEL,A0)

While the first method can be used with both addresses and registers
(e.g.: move.l #$50000,d0 - move.l #$50000,LABEL - MOVE.L #$LABEL,LABEL...)

P.S: writing move.l #$50000,d0 or MOVE.L #$50000,D0 is identical, you can
also write MoVe.L #$50000,d0, the result at the programme level
is identical, except that aesthetically you can create situations
that are either nice or horrible. A different discussion is needed for LABELS: 
labels can be identified even if at one point in the listing you
write them in lower case and at another in upper case, but this is only
because this option is set in the TRASH'M-ONE preferences,
which is UCase=UCase in the ‘Assembler/Assemble..’ menu, which means
‘Upper Case=Lower Case, i.e. capital letters=lowercase letters’.
If you remove this option, upper/lower case will also be taken into account when recognising labels, so
Dog: will be different from
CANE: or cAne: or caNe, etc.

The second method with LEA can only be used with address registers,
so it is easier to see that this method is faster: remember
that if you want to put an address in a register a0,a1... you must use the
LEA followed by the address WITHOUT THE HASH and the register in question.
Pay attention to these two examples:

1)    MOVE.L	$50000,a0    ; put the value contained in
; location $50000 (+$50001,$50002 and $50003
; in a0, as 1 location is 1 byte long, and
; move.l copies 4 bytes = 4 locations
; starting in this case from $50000

2)    LEA    $50000,a0    ; put the number $50000 in a0

Be careful when handling MOVE with or without the hash and LEA,
because it is easy to make mistakes at first and put the address instead of the
value of that address in the register or vice versa. For further comments
on this difference, see the example program LESSON2c.s

With address registers, various types of addressing are possible:
To begin with, let's analyse these two instructions:

move.l    a0,d0    ; Put the number contained in a0 in register d0
move.l    (a0),d0 ; Put the longword contained in the address in a0
; in register d0

The addressing in brackets is called INDIRECT, because instead of
copying the value in a0 DIRECTLY, the value contained
in the address that is in a0 is copied. A practical example is in LESSON2d.s

Using indirect addressing, you can act on addresses INDIRECTLY,
for example, by putting the address of the mouse button and colour 1 in the registers
you can rewrite the listing from lesson 1. This is what I did in LESSON2e.s


Let's look at some final examples to clear up any doubts about indirect addressing
:

move.l a0,d0        ; copies the value of A0 to reg. d0
move.b (a0),d0        ; copies the byte contained in the address
; in a0 to reg. d0
move.w (a0),(a1)     ; copies the word contained in the address
; in a0 to the address contained in a1
; (and the following, being a word made up of
; 2 bytes, i.e. 2 addresses!)
clr.w    (a3)        ; clears (resets) the word (2 bytes) ‘inside’
; the address in a3 - More precisely,
; the byte of the address in
; a3 and the following address are reset.
clr.l    (a3)		; As above, but 4 addresses are reset
; (a long = 4 bytes = 4 addresses)
move.l    d0,(a5)        ; the value of d0 is copied to the address
; contained in a5 (more precisely, I should
; say to the address in a5, and in the following 3,
; since a long occupies 4 addresses)
move.l    d0,a5        ; the value of d0 is copied to a5

Please note! Clear up any doubts you may have about the addressing studied so far,
also consulting the source code up to LESSON2e.s, because the addressing
I will now discuss is based on normal indirect addressing.

I should warn you that this is the most abstract part of lesson 2, as
you have to learn the last processor addresses, but I assure you
that by lesson 3 you will be putting everything into practice and seeing
video effects with Copper! So bear in mind that once you have got through this part, the rest
of the course will be much more PRACTICAL: each explanation will correspond to a new
special effect or ultra-vivid colour, so make an effort not to get bored
and don't give up now, because I myself gave up about
at this point the first time I tried to learn to program in ASM,
precisely because I was discouraged by the MESS of commands and open and closed brackets
that I couldn't follow anymore. I assure you, however, that once
you learn to read the commands, you can take off like a rocket and learn
by yourself by reading listings here and there, taking bigger and bigger steps: it's
like learning the rules of a sport: someone who doesn't know the
68000 instruction set is like someone who doesn't know the rules of, say,
football: watching the games (the listings), they won't understand anything
what those rowdy people are doing on a field kicking a ball,
and they will be bored to death, but once they understand the rules (addressing), they will be able to
interpret the phases of the games and learn more and more about the techniques
of the game (the tricks of programming and the graphics registers).

Let's look at two other ways of addressing:

move.l    (a0)+,d0    ; Indirect with post-increment
move.l    -(a0),d0    ; Indirect with pre-decrement

Let's analyse the first address, assuming this situation:

lea    NONNO,a0	; put the address of NONNO in a0:
MOVE.L    (a0)+,d0    ; put the value .L contained
; in the address in a0, i.e. $3231020, in d0
; (like a normal MOVE.L (a0),d0)
; then ADD 4 TO THE VALUE IN a0
; that is, we POINT to the following long
; with the address in a0; if it had been a
; move.w (a0)+,d0 to a0 AFTER (POST-INCREMENT)
; 2 (one word=2) would have been added,
; while in the case of a MOVE.B (a0)+,d0
; 1 (one byte) would have been added,
; i.e. it would have pointed to the
; following address.
MOVE.L    (a0)+,d1    ; same thing: copy the value .L
; contained in the address in a0 to d1, which now
; contains the address of NONNO+one longword,
; i.e. NONNO+4, or $13478.
rts            ; EXIT!

GRANDPA:
dc.l    $3231020,$13478

END

We can translate this type of addressing with two instructions:

1)    MOVE.L    (a0)+,LABEL

is equivalent to:

1b)	MOVE.L    (A0),LABEL    ; copies a long from the address in a0
; to the label
ADDQ.W    #4,a0        ; Add 4 to a0 (.L=4)
; NOTE: if you add a number less than
; 9, use the ADDQ command instead of ADD
; because it is dedicated to such numbers and is faster.
; Furthermore, on ADDRESS registers, if the number
; we add or subtract is less than
; $FFFF, i.e. a word, we can use .W
; instead of .L, and we will still act on
; the entire longword of the address.
Similarly:

2)	MOVE.W    (a0)+,LABEL

is equivalent to:

2b)    MOVE.W    (A0),LABEL    ; copies a word from the address in a0
; to the label
ADDQ.W    #2,a0        ; Add 2 to a0 (.W=2)

Similarly:

3)    MOVE.B	(a0)+,LABEL

is equivalent to:

3b)    MOVE.B    (A0),LABEL    ; copies the byte contained in the address
; to a0 in the label
ADDQ.W    #1,a0        ; Add 1 to a0 (.B=1)

So, to summarise in other terms, indirect addressing with post
increment can be compared to a worker on an assembly line
who FIRST performs his MOVE or instruction on the piece on the conveyor belt,
 and each time he has done his job on the piece, he moves
the conveyor belt (the address in a0) with a pedal (+).
An example of a loop may be clearer:

Start:
lea    $60000,a0    ; start cleaning
lea    $62000,a1    ; end cleaning
CLELOOP:
clr.l    (a0)+    ; clear a long from the address in A0 and increase a0
; by one long, i.e. by 4 addresses, in other
; words, clear a long and go to the next one
cmp.l    a0,a1    ; Has A0 reached $62000? That is, is a0 equal to a1?
bne.s    CLELOOP ; if not, continue with another cycle CLELOOP
rts

As you can see, this little program clears the memory from address $60000 to
$62000, using a clr (a0)+ repeated until the desired address is reached.
 A similar example can be found in Lesson2f.s

Now we will learn indirect addressing with pre-decrement, which is the opposite of the addressing just described.
In fact, instead of increasing
the address contained in the register after executing the operation, with
a clr.l -(a0), for example, a0 is first decremented, then
the instruction on the new address (in this case a0-4) is executed. Example:

lea    NONNO,a0    ; we put the address of NONNO in a0:
MOVE.L    -(a0),d0    ; a0 is decremented, in this case
rts            ; being a .L instruction, it is decremented
; by 4, after which it is copied to d0
; the value .L contained in the address
; in a0, i.e. $12345678, i.e. NONNO-4
; (the initial value-4 remains in the register)
dc.l    $12345678    ; if it had been a
NONNO:                ; move.w -(a0),d0 to a0 FIRST (PRE-INCREMENT)
dc.l    $ffff0f0f    ; 2 would have been subtracted (one word=2),
; while in the case of a MOVE.B -(a0),d0
END            ; 1 would have been subtracted (one byte),
; i.e. it would have pointed to the previous address
;.

We can translate this type of addressing with two instructions:

1)    MOVE.L    -(a0),LABEL

is equivalent to:

1b)    SUBQ.W    #4,a0        ; Subtract 4 from a0 (.L=4)
; NOTE: if you subtract a number less than
; 9, use the SUBQ command instead of SUB
; because it is dedicated to such numbers and is faster.

MOVE.L    (A0),LABEL    ; copies a long from the address in a0
; to the label
Similarly:

2)    MOVE.W    -(a0),LABEL

is equivalent to:

2b)    SUBQ.W    #2,a0        ; Subtract 2 from a0 (.W=2)
MOVE.W	(A0),LABEL    ; copy a word from the address in a0
; to the label

Similarly:

3)    MOVE.B    -(a0),LABEL

is equivalent to:

3b)    SUBQ.W    #1,a0        ; subtract 1 from a0 (.B=1)
MOVE.B	(A0),LABEL    ; copy the byte contained in the address
; to a0 in the label

To summarise with the worker as before, indirect addressing with pre
decrement can always be compared to a worker on an assembly line
who FIRST moves the conveyor belt (the address in a0) BACKWARDS with a
pedal (the -), THEN executes his MOVE or instruction on the piece that is
on the conveyor belt. An example of a loop:

Start:
lea    $62000,a0    ; start cleaning
lea    $60000,a1    ; end cleaning
CLELOOP:
clr.l    -(a0)    ; decrease a0 by one long and reset that long
; in other words, go to the previous long and clean it
cmp.l    a0,a1    ; Has A0 reached $60000? That is, is a0 equal to a1?
bne.s    CLELOOP ; if not yet, continue with another CLELOOP cycle
rts

As you can see, this little program cleans the memory from address $62000 to
$60000, using a clr -(a0) repeated until the desired address is reached
(but backwards! whereas with (a0)+ you start from
$60000 and go up by 4 to reach $62000, in this case you start from $62000
and go back by 4 to reach $60000).
See Lesson2g.s and Lesson2h.s to check the last 2 addresses.

Now we will learn how to use the addressing distance:
a MOVE.L $100(a0),d0 copies the long contained in the address in a0+$100 to d0,
i.e.: if, for example, we had the address $60200 in A0, the
longword contained in the address $60300 will go to d0.
Similarly, a MOVE.L -$100(a0),d0 will copy the long starting from
address $60100 into d0. Note that a0 does not change in value: the processor simply
calculates each time which address to operate on, adding
the value before the parentheses to the address in the register between the parentheses.
The maximum addressing distance is from -32768 to 32767 (-$7FFF, $8000).
An example of this type of addressing is Lesson2i.s

The last type of addressing is this:

MOVE.L    50(a0,d0),label

which has both an ADDRESSING DISTANCE (50) and an INDEX (d0):
the addressing distance and the contents of d0 are all added together to
define the address from which to copy the contents. In practice, it is like the
addressing distance, but the contents of
of the other register to the addressing distance, which in this case
ranges from a minimum of -128 to a maximum of +128.
I don't want to bore you with more examples of this addressing, you can
check it out when you find it in the next listings.

To finish LESSON 2, which, if you have followed it carefully, will enable you to
follow the operations of any program in ASM, it is essential to
explain the DBRA cycle, which is used a lot: using a data register,
 you can execute instructions several times, just put the
number of times-1 in the data register (whether it is d0, d1..
.) the number of times-1.
For example, the routine that clears the memory made with CLR.l (a0)+ can
be modified with a DBRA loop that performs the clearing the
desired number of times:

Start:
lea    $60000,a0    ; Start
move.l    #($2000/4)-1,d0	; Put in d0 the number of cycles needed
; to clear $2000 bytes: i.e.
; $2000/4 (i.e. DIVIDED BY 4, because each
; clr.l clears 4 bytes), all -1,
; because the loop is executed once
.
CLEARLOOP:
CLR.L    (a0)+
DBRA    d0,CLEARLOOP
rts

This routine clears from $60000 to $62000 as in the previous example, where
the CMP command compares a0 with a1, i.e. it checks whether we have reached
at $62000, which is in a1. In this case, however, CLR is executed 2047 times.
Try doing ?($2000/4)-1 from ASMONE. DBRA works like this:
if, for example, 2047 is placed in d0 the first time, CLR is executed,
then when DBRA is reached, d0 is decreased by 1 and the processor jumps back
to CLR, executes it, and so on, until d0 is exhausted. You need to put the
number of cycles required minus one because the first time the cycle is
executed without decrementing d0.

As a final example, study Lesson 2l.s, which has subroutines called
with BSR and the DBRA cycle in action, useful for understanding the structure of a
complex program.

To conclude, I would like to point out the difference between a BSR and a BEQ/BNE:
in the case of the BSR label, the processor jumps to execute the routine under the
label until it finds the RTS, which causes it to return to execute the instruction
under the BSR label, so we can say that it has executed a SUBROUTINE, i.e.
a routine executed in the middle of another routine:

main:
move.l    stuff1,d0

move.l    stuff2,d1

bsr.s    subroutine

move.l    stuff3,d2

move.l    stuff4,d3

rts    ; END OF MAIN ROUTINE, RETURN TO ASMONE


subroutine:
move.l    junk,d4

move.l    junk2,d5

rts    ; END OF THE SUBROUTINE, RETURN TO ‘move.l stuff3,d0’, i.e.
; under the bsr.s subroutine


In the case of a beq/bne BRANCH, you take either one path OR the other:


main:
move.l    stuff1,d0

move.l    stuff2,a0

cmp.b    d0,a0
bne.s    path2

move.l    stuff3,d1

cmp.b    d1,a0
beq.s    road3

move.l    stuff4,d0

rts    ; END OF MAIN ROUTINE, RETURN TO ASMONE


road2:
move.l    junk,d5

move.l    junk2,d6

rts    ; END OF ROUTINE, RETURN TO ASMONE, not under bne!!!
; here we have chosen this path, and how to find an RTS
; return to ASMONE!!!


road3:
move.l    junk3,d1

move.l    junk4,d2

rts    ; END OF ROUTINE, RETURN TO ASMONE, not under beq!!!
; here we have chosen this path, and how to find an RTS
; return to ASMONE!!!

The same applies to the BRA label, which means JUMP TO label, equivalent
to JMP, so it's like a train that finds a switch on the tracks, it doesn't go back
to the switch when it reaches the end of the track! It reaches the end of the track and
that's it, no Star Trek-style backward teleportation.

For a final clarification on address registers, see Lesson 2m.s

To load LESSON3.TXT, you can do one of two things: either type “R” and
press Enter, opening the requester where you can select with the mouse
which text to load (in this case df0:SOURCES/LESSON3.TXT), or
you must make sure you are in the right directory with ‘V df0:LESSONS’
and you can then load it with a simple ‘R LESSON3.TXT’

+