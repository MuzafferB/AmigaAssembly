
;    68000 PROGRAMMING REFERENCE TABLE

Addressing summary:

move.l #123,xxxx     ; Immediate: the number is placed in the destination
move.l xxxx,$50000     ; Long absolute
move.l xxxx,$500.w     ; Short absolute (less than $7FFF)
move.l    xxxx,D0         ; Direct data register
move.l    xxxx,A0		 ; Direct address register
move.l    xxxx,(a0)     ; Indirect address register
move.l    xxxx,(a0)+     ; Indirect address register with post-increment
move.l    xxxx,-(a0)     ; Indirect address register with pre-decrement
move.l    xxxx,$123(a0)     ; Indirect address register with OFFSET (address distance)
move.l    xxxx,$12(a0,d0.w) ; Indirect address register with OFFSET and INDEX
move.l offset(PC),xxxx     ; Relative to PC with OFFSET
move.l offset(PC,d0.w),xxxx ; Relative to PC with OFFSET

-    -    -

* The most diverse addresses can be ‘MIXED’ in the instructions
between source and destination, for example ‘move.l -(a0),12(a0,d3.l)’.

-    -

* Decimal numbers are not preceded by any symbol (e.g. 123), hexadecimal numbers
are preceded by $ (e.g. $1a0) and also include the letters
A to F, while binary numbers are preceded by the symbol % (e.g. %01011)
and consist only of 0 and 1 (CURRENT OR LESS IN THE WIRES!!!).
Conversion between the three numbering systems is straightforward,
as you just need to use the ASMONE “?” command followed by the number, and you
will get the result in decimal, hexadecimal and ASCII, i.e. in CHARACTERS:
in fact, even letters such as “ABCDabcd...” are represented by one byte
each. For example, ‘Z’ is $5a (try with a ?‘Z’). Characters are
indicated by placing them between quotation marks (either ‘’ or “”) and can be
used both in commands (MOVE.B #“a”,LABEL1) and by placing them in memory
with DC.B (e.g.: DC.B ‘A text in memory...’).

-    -

* In assembler, multiplication is indicated with *, division with /, and
round brackets can be used as desired, for example:
move.l #(100/2*(12+$41-32)+%011010),RESULT

-    -

* 1 byte = 8 bits ($00 = %00000000; $FF = %11111111)
1 word = 16 bits ($0000 = %0000000000000000; $FFFF = %1111111111111111)
1 long = 32 bits, i.e. 2 words ($00000000 = %000000000000000000000000000000)

-    -

* Bits are counted starting from 0 from right to left: for example
a byte with bit 5 set to 1 (i.e. HIGH): %00100000. A byte therefore
has bits ranging from 0 (least significant bit) to 7 (most significant bit),
 a word ranges from 0 to 15, and a longword ranges from 0 to 31.
To easily number the bits, you can use this trick:
; 5432109876543210    - a word
move.l    #%1000010000110000,d0    ; bits 15,10,5 and 4 HIGH (at 1)

-    -    -

* Addresses are indicated by convention with hexadecimal numbers

-    -    -

* Instructions with the symbol ‘#’ such as MOVE.L #123,d0, CMP.L #10,LABEL1 etc.
consider the number after the hash as a ‘CONSTANT’ number, i.e.
just as a number, not as an address, unlike when the hash is not
present: move.b $12,$45 copies the byte in address $12
to the address $45, while move.b #$12,$45 puts the number $12 in $45.

-    -    -

* The DATA and ADDRESS registers are 32 bits long, i.e. a longword; you cannot work with .b on the
ADDRESS registers, only with .w or .l

-    -    -

* You cannot operate on odd addresses with .w or .l instructions, only with
.b. For example, move.l #1,$10001 sends the computer to GURU, while
move.b #1,$10001 causes no problems

-	-

* A byte can contain a number from $00 to $ff, i.e. 255, after which
additions start from zero. The same applies to words,
whose maximum number is $FFFF, i.e. 65535, and to longwords (max: $FFFFFFFF)

-

* LABELS, COMMENTS after ; and DC.W are not 68000 instructions, but
assembler commands useful for indicating specific positions in the program
or data (LABEL), for inserting comments useful for understanding the
listing, or for directly inserting bytes, words or longwords at specific points
in memory (DC.W). You can check this by disassembling the memory with
the command ‘D $xxxxx’ or ‘D LABEL’.

** ** ** ** ** ** ** ** ** ** **

;    68000 ADDRESSING (Examples)

; Addressing with absolute addresses, .L (Longword)

move.l    #$123,$50000    ; put $00000123 in $50000 (in fact, the zeros on the
; left are optional, writing move.l #$123,xxxx
; is like writing move.l #$00000123,xxxx, in memory
; the instruction is always assembled with zeros).
; NOTE that with this .l instruction we have
; modified 4 bytes (being a long 4 bytes):
; i.e. the addresses $50000,$50001,$50002,$50003,
; giving them the following values:
; $50000 = $00
; $50001 = $00
; $50002 = $01
; $50003 = $23

-    -    -

; Addressing with absolute addresses, .W (Word)

move.w    #$123,$50000    ; put $0123 in $50000 - With this instruction .w
; we have modified 2 bytes (being a word 2 bytes long
;): i.e. the addresses $50000 and $50001:
; $50000 = $01
; $50001 = $23

-

-

-
; we have modified 1 byte, i.e. only $50000.
; $50000 = $12
; PAY CLOSE ATTENTION TO THE DIFFERENCES IN EFFECTS
; SIMPLY BY CHANGING .L to .W or .B, in fact
; beginners often make mistakes by
; swapping .w with .l or by incorrectly evaluating
; of the effects of these instructions. Use the
; debugger (command ‘AD’, then cursor key >) to
; check certain instructions and clear up any doubts.

move.l $40000,$50000    ; in this case, we copy the contents of the 4 bytes
; $40000,$40001,$40002,$40003 into the 4 bytes $50000,
; $50001,$50002,$50003, for example:
; if $40000= $00102304:
; $50000 = $00
; $50001 = $10
; $50002 = $23
; $50003 = $04
; In the same way, by moving .w and .b, we copy from one
; address to another 2 bytes or 1 byte.

-    -

NOTE: when we use LABELS to modify data in memory, the assembler
then converts them into the ACTUAL addresses that the labels represent, given
that LABELS are used to define certain areas of the program, to label
these parts, so when we refer to the LABEL, we are actually referring to the point
where the label itself is placed. The previous examples
of absolute addressing therefore include instructions such as:

MOVE.L    LABEL1,$50000
MOVE.W    #$123,LABELBAU
MOVE.B    LABELCANE,LABELGATTO

Which will be assembled in memory in a similar way to this:

MOVE.L	$64230,$50000    ; let's assume that LABEL1 was at $64230
MOVE.W    #$123,$726e0    ; let's assume that LABEL1 was at $726e0
MOVE.B    $23450,$3a010    ; as above...

So for the bytes, words and longwords indicated with LABEL, you have to think
as if they were addresses, precisely because they ARE ASSEMBLED as addresses!!!!

This is why an instruction like this:

MOVE.L    #LABEL1,$dff080        ; Used to ‘point’ to the copperlist

Puts the address of LABEL1 in $dff080 instead of copying the 4 bytes placed
after LABEL1: because LABEL1 is converted to its address, and since it is
placed behind the hash symbol (#), it is copied as a number in
$dff080, i.e. in the destination... let's take an example:

MOVE.L    #LABEL1,LABEL2
MOVE.L    LABEL1,LABEL2

They are assembled as follows: (assuming hypothetical addresses for the LABELS)

MOVE.L    #$42300,$53120    ; the number $42300 is placed in $53120,
; i.e. the address of the label
MOVE.L    $42300,$53120    ; the longword found in $42300 is copied to $53120
;


-	-

NOTE2: it is possible to refer to absolute addresses below the word, i.e.
up to $7FFF, in a more refined and faster way, by adding a .w after
the address: this is the case with MOVE.L 4.w,A6 moves the execbase to A6, but
any instruction that acts on WORD or BYTE addresses can
be ‘shortened’ by removing the 4 superfluous zeros on the left: let's see the difference:

(assembled)
MOVE.B    #10,$123    -> MOVE.B #10,$00000123
MOVE.B    #10,$123.w    -> MOVE.B #10,$0123    - WITHOUT UNNECESSARY ZEROS

THE EFFECT OF THE INSTRUCTION DOES NOT CHANGE!!! Only its ‘FORM’ changes, which appears
slimmer and faster. Forgetting to put .w in ‘short’ addresses
simply produces a code with a few more words.

** ** ** ** ** ** ** ** ** ** **

; Data registers, .L (longword)

move.l    #$123,d0    ; direct data register (put $123 in d0)

move.l    d1,d0        ; direct data register (copy the value of d1 to d0)

; Data registers, .w (word) (note: the word on the right is called ‘LOW’,
( the word on the left is called ‘HIGH’: $ALTABASS (.l = 4 bytes)

move.w    #$123,d0    ; in this case we only change the LOWER word of d0,
; if, for example, d0 was: $0012fe3c, acting only on the
; lower word, i.e. $fe3c, we will change d0 to $00120123.

move.w    d1,d0        ; Similarly, we copy the ‘low’ word of d1 into the
; low word of d0: if d1 contains $12345678, while
; d0 contains $9abcdef0, after this instruction d0
; will contain: $9abc5678
; ^^^^ WORD!

; Data registers, .b (byte)

move.b    #$12,d0        ; in this case we only change the rightmost byte,
; if, for example, d0 was: $0012fe3c, acting only on the
; first byte, i.e. $3c, we will change d0 to $0012fe12.

move.b    d1,d0        ; Similarly, we copy the first byte of d1 to
; the first byte of d0: if d1 contains $12345678, while
; d0 contains $9abcdef0, after this instruction d0
; will contain: $9abcde78
; ^^ BYTE!

The address registers a0, a1, a2, a3, a4, a5, a6 (DO NOT USE a7, called SP: it is the STACK)
behave like data registers, but cannot be accessed with .b.
They can also be used to store data, even though they are dedicated to
addresses.

** ** ** ** ** ** ** ** ** ** **

; INDIRECT ADDRESSING THROUGH ADDRESS REGISTERS

move.w #123,(a0)    ; In this case, the number 123 is copied into the word
; contained in the address that is in a0. It is called
; indirect because instead of indicating the actual address
; a register containing
that address, and that address is used to indicate
the destination. This only happens when the
address register is in brackets, otherwise
123 would be placed directly in the register.
A DATA REGISTER CANNOT BE USED for
indirect addressing.
; 
It can be said that the a0 register is used as a
; POINTER to a memory location, i.e. it POINTS
; like a mouse arrow or a hunting dog in the
; direction of its prey: an address or register containing
; the address of something that is accessed by “asking”
; the pointer where it is located is called a “POINTER”.
 For example, the copperlist
; has its own POINTER register, $dff080, in which
; the address of the copperlist is placed: the copper
; each video frame sees where the copperlist is
; from the address contained in $dff080.

move.l    (a0),(a1)    ; In this case, we copy the long contained in (a0),
; i.e. from the address contained in a0, into the long
; contained starting from the address in a1. If, before
; executing this instruction, the address $100 had been in a0
; and $200 in a1, the copy would have
; have been performed as for a MOVE.L $100,$200, or to be
; more refined, MOVE.L $100.w,$200.w....

-    -    -

; INDIRECT ADDRESSING WITH POST-INCREMENT (address incremented AFTER!)


move.w #123,(a0)+    ; In this case, the number 123 is copied to the word
; contained in the address that is in a0, AFTER
; A0 is INCREMENTED by one WORD. If the instruction
; had been .B, AFTER THE MOVE a0 would have been
; incremented by one byte, if it had been .L, it would
; have been incremented by 4 bytes, i.e. one LONGWORD.

move.l    (a0)+,(a1)+    ; In this case, we copy the long contained in (a0),
; i.e. from the address contained in a0, to the long
; contained starting from the address in a1, after which
; we increase both a0 and a1 by 4, i.e. by one long,
; in practice we move the two registers to the next long
;. With a series of these instructions,
for example, you could copy a piece of memory:

lea    $50000,a0    ; source address
lea    $60000,a1    ; destination address
move.l    (a0)+,(a1)+
move.l    (a0)+,(a1)+
move.l    (a0)+,(a1)+
move.l    (a0)+,(a1)+
move.l	(a0)+,(a1)+

; In this case, we have copied 5 longwords from
; $50000 to $60000.

-    -    -

; INDIRECT ADDRESSING WITH PRE-DECREMENT (address decremented FIRST!)

move.w #123,-(a0)    ; FIRST, A0 is DECREMENTED by 2, i.e.
; by one WORD (PRE-decrement), then the number 123 is
; copied into the word contained in the address that is
; in a0 (i.e. the one from which 2 has been subtracted).
; If the instruction had been .B, a0 would have been
; decremented by one byte, if it had been .L, it would
; have been decremented by 4 bytes, i.e. a LONGWORD.

move.l    -(a0),-(a1)    ; a0 and a1 are decremented by 4 (a long),
; then the long contained in (a0) is copied,
; i.e. from the address contained in a0, into the long
; contained starting from the address in a1.

; With a series of these instructions, you could copy
; a piece of memory as in the previous case, but
; proceeding ‘backwards’ like a crab, in fact
; you have to start from the address where the copy ends
; to go back to the start addresses
of the copy, i.e. $50000 and $60000. Let's set
the start at $50014 and $60014, then copy one long
at a time ‘backwards’ to the location $50000
and $60000: to ‘calculate’ the address to start from
; I added (5*4), i.e. $14, to the addresses, i.e.
; 5 longwords * 4 bytes per longword. Note that
; in memory $50000+(5*4) is assembled as
; $50014, because during assembly any
; mathematical operations are also performed.

lea    $50000+(5*4),a0    ; FINAL source address
lea    $60000+(5*4),a1    ; FINAL destination address
move.l    -(a0),-(a1)
move.l    -(a0),-(a1)
move.l    -(a0),-(a1)
move.l    -(a0),-(a1)
move.l    -(a0),-(a1)

; In this case, we have copied 5 longwords from
; $50000 to $60000, but starting from $50014 backwards
to $50000: The difference with the previous example
is like the difference between starting to clean
a corridor from the right or from the left: in both
cases we ‘copy’ the dirt into the bin, but
moving in two opposite directions.

-    -    -

; INDIRECT ADDRESSING WITH ADDRESSING DISTANCE (called OFFSET)

move.w #123,$34(a0)    ; In this case, the number 123 is copied to the word
; contained in the address obtained from the sum of
; that in a0 + $34, i.e. the OFFSET. If, for example,
; there was $50000 in a0, the word 123 would
; be copied to $50034. The offset can vary between
; -32768 and 32767.

-    -    -

; INDIRECT ADDRESSING WITH ADDRESSING DISTANCE AND INDEX


move.w #12,5(a0,d0.w)	; In this case, the number 12 is copied to the word
; contained in the address obtained from the sum of
; the one in a0 + 5, + the word in d0. If, for example,
; there had been $50000 in a0 and $1000 in d0, the word 12
; would have been copied to $51005. The offset in this
; case can only vary between -128 and +127.
; In practice, a register is also added to the sum to obtain
; the final address, which can be
; either DATA or ADDRESSES, of which
; both the entire content (d0.l) and a word (d0.w),
; but it cannot be considered a single byte.
; The additional register in parentheses is called the INDEX

SOME EXAMPLES:

lea    $50000,a3
move.w    #$6000,d2
move.l    #123,$30(a3,d2.w)    ; 123 copied to $56030
*
lea    $33000,a1
move.w    #$2000,a2
move.l    #123,$10(a1,a2.w)    ; 123 copied to $35010
*
lea    $33000,a1
lea    $20010,a2
move.l    #123,-$10(a1,a2.l)    ; 123 copied to $53000

** ** ** ** ** ** ** ** ** **

; PC RELATIVE ADDRESSING (with automatic offset)

This type of addressing is automatically ‘fixed’ by ASMONE and
passes ‘UNNOTICED’: for example, note the difference between these instructions:

MOVE.L    LABEL1,d0        ; ABSOLUTE ADDRESS
MOVE.L    LABEL1(PC),d0        ; ADDRESS RELATIVE TO THE PC

These two instructions do the same thing, but the one with (PC) is shorter
and faster than the first one, and is RELATIVE TO THE PC, in fact it is based on a DISTANCE OF
ADDRESSING (offset) from the PC register, i.e. the PROGRAM COUNTER, which is the
register where the 68000 keeps the address where it is currently executing.
The offset between the instruction with (PC) and the label is calculated automatically
by the assembler during assembly, and the correct offset is placed in memory
to refer to the label in question by moving forward or backward
from the instruction being executed by the correct bytes, so that the instruction does not
contain the address of the label, but the number of bytes forward or backward
that the processor must move to find the label in question. The difference
is obvious: if we move all the code to another part of the memory
,
 the distance between the instruction with (PC) and the label remains the same, so
the instruction always “works”, whereas if it is not related to the PC, we just need to move
the program to another part of memory to cause it to crash: in fact
the move.l LABEL1,d0 is translated into MOVE.L $23000,d0 (by assumption), so
LABEL1 is located at $23000. If we move the entire program (which, for example,
started at $20000 and ended at $25000) forward by $10000, executing it will cause
significant problems, as MOVE.L $23000,d0 will no longer refer
to label1, which will now be at $33000!!!! Whereas if the code was all
Relative to the PC, the move would always refer to label1, i.e. to
$33000, calculating the distance between the move and the label, which would remain
the same. Instructions such as BRA, BSR, BNE, BEQ are also relative to the PC, i.e.
a BSR.W ROUTINE1 will be assembled in memory as BSR (50 bytes later),
for example, and not BSR $30000. The address is assembled by instructions
equivalent to BSR, such as JSR: a JSR LABEL1 is assembled with the address
of LABEL1, in the same way that a JMP (JUMP-Equivalent to BRA) will be assembled
with the REAL address of the label. But then why aren't
relative moves to the PC and BSR instead of JSR? Because PC-relative addressing
has the limitation of being able to refer to addresses at most
32767 forward or -32768 backward; for more distant labels, it is necessary to
use move with absolute addresses or JSR/JMP. However, as already mentioned, all
these calculations are done automatically by the assembler, so they are not
relevant to us. In practice, it is enough to know that WHEN YOU CAN, it is always good to put
a (PC) after the first label and use bsr/bra instead of JSR/JMP; when this is not
possible because the distance is greater than 32768, the assembler reports
the error and you just need to remove the (PC) or replace the BRA/BSR with a JMP/JSR, which
can reach the maximum distance. You could also program with all
JSR/JMP and move without (PC), but the code would be longer and slightly
slower, so it is always best to try to do your best!!!
The issue of RELOCATION, i.e. moving routines to different areas
of memory, is handled by the operating system: when we save
our program as executable with the ‘WO’ command, we save a file that
we can load from the SHELL by typing its name: the operating system
takes care of putting it in a free memory location, which can be
anywhere, and RELOCATES THE PROGRAM, i.e. it also changes the addresses to the JSRs and
moves not related to the PC to make them return, so you can program without
any problem of putting all moves (PC); Among other things, it is not possible to
use (PC) addressing for labels found in different SECTIONS of the
program: for example, COPPERLISTs, if they are found in a SECTION, cannot
be modified except with addressing without (PC), because the operating system
‘ALLOCATES’ the sections at unpredictable distances, perhaps greater than
32768, i.e. the limit of PC RELATIVE addressing.


EXAMPLES OF USING PC-RELATIVE ADDRESSING:

MOVE.L    LABEL1(PC),LABEL2    ; Note: you cannot put (PC)
; on labels used as destinations!
; move.l a0,LABEL(PC) is an ERROR!
ADD.L    LABELBAU(PC),d0		; This is possible because the label is the SOURCE
SUB.L    #500,LABEL        ; YOU CANNOT PUT THE PC, because
; the label here is the DESTINATION
CLR.L    LABEL            ; you cannot put the PC in this
; case; in practice, the (PC) can
; only be put when the label is
; before the comma!

; PC-RELATIVE ADDRESSING WITH OFFSET AND INDEX

This addressing is the same as before, with the INDEX, i.e. with a
register that must be added to the (PC) and the OFFSET, just as with
the offset+index of the ADDRESS registers:


MOVE.L    LABEL1(PC,d0.w),LABEL2    ; like (PC) addressing, but in addition
; the word
; contained in d0 must be added to the count, so it does not
; refer to LABEL1, but to some
; label at a distance D0 from LABEL1
ADD.L	LABELBAU(PC,a0.l),d0    ; As before, using A0.L as the index.

That's all there is to addressing.

** ** ** ** ** ** ** ** ** ** **

MOST COMMON INSTRUCTIONS:

MOVE.x    SOURCE,DESTINATION    ; Copies a byte, a word or a
; longword

LEA    address,Ax        ; Loads an address: This
; instruction can only be used
; with address registers and is used
; to put the address in question
; in the register (either in the form
; of a label or a number, e.g. $50000).
; It is equivalent to:
; MOVE.L #address,a0
; but it is faster.


CLR.x    destination        ; This command RESETS the destination
; CLR=CLEAR=CLEAN


JUMPS CONDITIONED BY A TST, BTST, CMP

CMP.x    source,destination    ; COMPARES 2 operands, which can
; be a label and a register, or
; an absolute number # and a register
; or something else. A POSITIVE result is
; given if the 2 operands are EQUAL
; for the following BEQ/BNE

TST.x    register.label/address	; Checks whether the operand in question
; is equal to ZERO, if the RESULT
;

BTST    #x,address/Dx        ; Checks if bit x of the address
; is ZERO; if the RESULT is POSITIVE;
; a BTST can also be performed on
; a data address, in which case
; the test can be performed on one of the
; 32 possible bits (0-31), otherwise
; if the btst is on a memory location
; the test can be performed on
; only one byte (bits 0-7).

Immediately after a CMP, a TST or a BTST there is always a BNE, a BEQ or another
similar command. In the case of BNE and BEQ, branches and
jumps conditioned by TST/CMP can be made. BEQ/BNE/BRA/BSR can be .w or .b,
depending on the distance of the routines they indicate. If they are very close together
, you can use .b (you can also use .s, i.e. SHORT=SHORT).


BSR.x    label        ; Execute the LABEL routine, then
; return having found RTS at the end
; of the ‘label’ routine

BEQ.x    label        ; If the result is positive, jump to label
; (DOES NOT RETURN AFTER EXECUTING
; THE LABEL AS A BSR, HERE CHOOSE WHETHER
; TO JUMP OR NOT

BNE.x    label        ; If the result is not positive, jump to label
; (DOES NOT RETURN AFTER EXECUTING

BRA.x    label		; ALWAYS jump to label (LIKE JMP)


ADD.x    operand1,destination    ; This instruction adds
; a value to the destination

SUB.x    operand1,destination    ; This instruction subtracts
; a value from the destination


SWAP    Dx        ; Swaps the 2 words of the longword
; contained in a DATA register, does not
; require .b,.w or .l

SWAP means EXCHANGE, in fact it EXCHANGES the 2 words of a
longword, making the HIGH one LOW and vice versa:

MOVE.L    #CANETOPO,d0    ; in d0 we put the longword CANETOPO

SWAP    d0        ; SWAP WORDS: the result is that
; in d0 we have TOPOCANE!!!!

*

NOTE: There are specific instructions for address registers: for
example, we should write CMPA.W d0,a0 and not CMP.W d0,a0, in the same
way we should write ADDA.W a2,a0 and not ADD.W a2,a0;
instead, for CONSTANTS (#xxxx) we should use CMPI.x #10,d0 and not CMP.x #1,d0,
we should write SUBI.x #123,d2 and not SUB.x #123,d2, but the assembler ASSEMBLES
AUTOMATICALLY ASSEMBLE THE CORRECT INSTRUCTION even if we always write cmp/add/sub
etc. with address registers and in cases of #xxx,operating.
 Therefore, there is no need to worry if a cmpi appears in a listing and then the
normal cmp appears, or an adda appears and then an add appears, because the assembler always assembles correctly.
 To check, try assembling these lines and disassembling them
with ‘D TEST’; the assembler will assemble according to the rule.

TRY:
CMP.W    d0,a0
ADD.W    a1,a2
SUB.L    #123,$10000
CMP.b    #20,d4

It will be assembled as:

CMPA.W    D0,A0
ADDA.W    A1,A2
SUBI.L    #$0000007B,$00010000
CMPI.B    #$14,D4


-    -

NOTE2: Certain instructions that do the same thing can be written in
different ways: for example, the 68000 has dedicated commands for
particular situations that are faster in those situations:

1) ADDQ.x #Number,destination    ; The ADDQ.x command can be used for
; additions with numbers between 1 and 8
; (Q stands for QUICK!)

1) SUBQ.x #Number,destination    ; The SUBQ.x command can be used for
; subtractions with numbers between 1 and 8

3) MOVEQ #Number,dx        ; The MOVEQ command can be used to replace
; MOVE.L #num,d0, where num is between
; -128 and +127. MOVEQ is always .L, so
; it does not require .b, .w or .l

-    -    -