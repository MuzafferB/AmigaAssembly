
ASEMBLER KURSU - DERS 3

Şimdi uygulamaya geçeceğiz, ancak önce ders 2'nin özetini içeren
68000.TXT dosyasını bir metin tamponuna yüklemenizi tavsiye ederim. Bu,
 bu dersin listelerini okurken bir adreslemeyi veya komutu hatırlamadığınız
durumlarda yararlı olabilir, çünkü bu ders, daha önce ele alınan adreslemelere ve komutlara aşina olmanızı gerektirir.
Bu metinde, neredeyse hiç kullanılmayanlar da dahil olmak üzere tüm adreslemeler açıklanmaktadır,
 bu nedenle okuyun, ancak INDICE ile adreslemeleri anlamazsanız endişelenmeyin,
 ders 3'te kullanılmayacaklar!

Bu derste, ekranda bir şeyler görüntülenmeye başlanacak: 
Bunu yapmak için, grafiklerle ilgilenen COPPER yongası için bir COPPERLIST, yani bir program yazmamız gerekiyor
.
 Bu programı daha önce ekranın rengini değiştirmek için kullanmıştık
($dff180, COLOR00 adlı bir copper kaydıdır).
Ancak şimdilik sadece işlemciyle
kayıtlarda doğrudan değişiklikler yaptık ve AD ile listeleri
tek tek komutlar halinde çalıştırdığınızda fark edebileceğiniz gibi, COLOR00'a (yani
$dff180) koyduğumuzda, çok kısa bir parlama oluyor ve hemen işletim sisteminin
yani ASMONE'nin normal rengi geri geliyor. Sadece bir sayıyı sürekli girerek bir döngü yaparsak
tüm ekranı renklendirebiliriz, ancak programdan çıktığımızda renk kaçınılmaz olarak
normal haline geri dönüyor.
dönüyor. Bunun nedeni, pencereler, yazılar ve diğer her şeyi gördüğümüz ekranın
bir COPPERLIST'in, daha doğrusu bir
sistem COPPERLIST'in sonucu olmasıdır. Copperlist, bir tür şudur:

MOVE.W    #$123,$dff180    ; COLOR00 - renk 0 girin
MOVE.W    #$123,$dff182    ; COLOR01 - renk 1'i girin
vb...

Bu sürekli olarak çalışır, bu yüzden
işlemciyle rengi değiştirdiğimizde hemen sistem rengi geri gelir: çünkü
copperlist her saniyede 50 kez tüm renkleri yeniden tanımlar!!!!
Şekilleri sorunsuz bir şekilde görüntülemek için
sistem copperlist ile mücadele ederek döngüye devam etmenin mümkün olmadığını
anlayacaksınız, çünkü copperlist her şeyi aynı anda yeniden tanımlar, bu yüzden
sistem copperlist'i ortadan kaldırıp kendimize ait bir copperlist oluşturmalıyız. DAHA KOLAY OLAMAZ!
Daha önce de belirttiğim gibi, copperlist, COPPER kayıtlarına, yani $dffxxx kayıtlarına değerler koyan bir dizi MOVE
işleminden ibarettir.
Ancak bunlar işlemci tarafından yapılan hareketler değil, copper
tarafından yapılan hareketlerdir ve tesadüfen değil, işlemci
ile başka şeyler yaparken bu COPPERLIST'i bağımsız olarak yürütür... Bu, PC'lerde Amiga'nın LIONHEARTH veya PROJECT X'inin olmamasının nedenlerinden biridir.
Bu nedenle, 68000 için yaptığımız gibi, ona bir LISTATO yazmamız gerekecek
daha sonra COPPER'a bizimkinin nerede olduğunu bildirerek
WorkBench'inkinin yerine okumasını ve çalıştırmasını sağlamalıyız.
Copper SADECE 3 komuta sahiptir ve bunlardan pratikte sadece 2 tanesi kullanılır:
kullanılan ikisi MOVE ve WAIT'tir; hiç kullanılmayan komut ise
SKIP'tir, bu yüzden onu sadece örnek bir listede bulursak konuşacağız
.
MOVE ÇOK KOLAY: şunu hatırlıyor musunuz:

MOVE.W    #$123,$dff180    ; RGB rengini COLOR00'a girin

Bu, copperlist'te şu şekilde çevrilir:

dc.w    $180,$123    ;
; dc.w ile sayıları doğrudan belleğe yerleştirin, bu kadar
; sadece 2 komutu öğrenmeniz yeterli!

Yani: önce hedef adresi, $dff olmadan yazılmalıdır
daha önce $dff000'ı a0'a yazdığımızda gördüğümüz gibi, $180(a0) yazmak yeterlidir
aynı şekilde, tasarımcılar her seferinde $DFF yazma zahmetinden bizi kurtarmak için
$180 veya
$182 veya COPPER'ın herhangi bir başka kaydını yazmak yeterlidir, çünkü SADECE Copper kayıtları
COPPERLIST tarafından yazılabilir ve sadece
ÇİFT kayıtlarına erişilebilir, örneğin $180,$182... asla $181,$183!!!!, ayrıca
her seferinde sadece bir WORD değiştirebilirsiniz. Gördüğünüz gibi, COPPERLIST
, 68000 komutları gibi
RTS, MOVE.. gibi KOMUTLAR tarafından $4e75, vb. olarak dönüştürülerek birleştirilmez, BYTES'leri
gerçekte bellekte olduğu ve COPPER koprosesörü tarafından okunduğu gibi 
COPPERLIST için, onu BYTES
gücüyle belleğe yerleştirmek için DC komutunu kullanmalıyız, ancak bu çok kolaydır. Örneğin, ilk 4 rengi tanımlamak için:

COPPERLIST:
dc.w    $180,$000    ; RENK 0 = SİYAH
dc.w    $182,$f00    ; RENK 1 = KIRMIZI
dc.w    $184,$0F0    ; RENK 3 = YEŞİL
dc.w    $186,$00F    ; RENK 4 = MAVİ

Renklerin formatını hatırlıyor musunuz? RGB=KIRMIZI, YEŞİL, MAVİ.
$dffXXX kayıtlarının anlamı hakkında her an yardım almak için
“=C 180” veya “=C sayı” yazın, kısa bir özet (İngilizce) göreceksiniz.
Örneğin, “=c 006” yazın, rengi yanıp sönmek için kullandığınız kaydın adını ve açıklamasını göreceksiniz.
 Tüm kayıtları görmek için
sadece “=C” yazın.

WAIT ise ekranın belirli bir satırını beklemek için kullanılır, örneğin
arka plan rengini (color0) yarıya kadar siyah,
alt yarısını mavi yapmak istiyorsanız,

dc.w    $180,0        ; renk 0 SİYAH

ardından ekranın yarısını bekleyen bir WAIT yazın, ardından

dc.w    $180,$00F    ; renk 0 MAVİ

Bu hile ile tüm paleti (renkleri) videonun herhangi bir satırında değiştirebilirsiniz,
 bu ise VGA'lı PC'lerde hayal bile edilemez, çünkü
Amiga oyunları genellikle sadece 32 renkli ekranlara sahip olsa da
ekran aşağı inerken renk paletini ara sıra değiştirerek
256 renkli bir VGA'dan daha fazla ton elde edilebilir, özellikle de
tek bir arka plan rengiyle her satırda rengi değiştirerek bir gradyan oluşturabileceğinizi
düşünürsek, bu dersin ilk listesinde yapacağımız gibi. WAIT komutu şu şekilde görünür:
dc.w
	$1007,$FFFE    ; WAIT koordinat X= $10, Y= $07

Bu komutun anlamı: $10 yatay satırı bekle, 7. sütun (yani
soldan yedinci nokta; noktalar PIXEL olarak adlandırılır).
FFFE, BEKLE anlamına gelir ve her zaman yazılmalıdır,
ilk bayt beklenecek yatay satır (x) ve ikincisi dikey satır (y)
olarak kullanılır.
Ekran, birbirinin yanında dizilmiş birçok noktadan oluşur,
 çok küçük kareli bir kağıt gibi, örneğin milimetre kağıdı.
(deniz savaşında olduğu gibi) 16,7 konumunda, yani sayfanın üst kenarından
aşağı doğru 16 nokta ve sol kenardan sağa doğru 7 nokta
uzakta bulunan noktayı (piksel) belirtmek için $1007 yazacağım. ($10=16!).
Genellikle yatay çizginin başlangıcını belirtmek yeterlidir, (konumu
$07 yerine $01'dir, çünkü ikincisi monitörün en solunda
dışında kalır).
WAIT komutu COPPERLIST'i sonlandırmak için de kullanılır: aslında
COP'un sonunu belirtmek için

dc.w    $FFFF,$FFFE    ; Copperlist sonu

Geleneksel olarak Copper bunu son olarak kabul eder, çünkü
var olmayan bir satırı bekleyeceğini belirtir! (copperlist daha sonra baştan başlar).
Bir süre önce, bazı eski Amiga modellerinde tek bir copperlist son komutu yerine iki komutun gerekli olduğu söylentisi yayıldı, ancak
bu bir toplu psikoz gibi görünüyor, çünkü kimse iki komut kullanmadı ve her zaman
her şey çalıştı.

Son bir şey: Şu anda çizim içermeyen
sadece gölgelendirmelerden oluşan copperlist'imizi yapmak için BITPLANE'leri, yani
üst üste binerek şekilleri oluşturan BIT DÜZLEMLERİNİ devre dışı bırakmak gerekir.
Bunu yapmak için DC.W $100,$200 satırını eklemek yeterlidir, yani
bitplane kontrol kaydı olan $dff100'e $200 değerini koyarız.

ARTIK VİDEONUN YARISINDA BEKLEYEN VE RENK DEĞİŞTİREN
COPPERLIST'İ TAMAMEN YAPABİLİRİZ!

COPERLIST:
dc.w    $100,$200    ; BPLCON0 Şekil yok, sadece arka plan
dc.w    $180,0       ; Renk 0 SİYAH
dc.w    $7f07,$FFFE	 ; WAIT - $7f (127) satırını bekle
dc.w    $180,$00F    ; Renk 0 MAVİ
dc.w    $FFFF,$FFFE  ; COPPERLIST'İN SONU

Copperlist'lerin çalışıp çalışmadığını kontrol etmek için
renk tonları oluşturmanız gerekeceğini göz önünde bulundurarak,
COLOR COPPER RENK SEÇİMİ İÇİN REFERANS TABLOSU:

Amiga, 32 farklı renk için 32 renk kaydı içerir:

$dff180        ; renk0 (arka plan)
$dff182        ; renk1
$dff184        ; renk2
$dff186        ; renk3
...
$dff1be        ; renk31

Bu 32 renk kaydının her birinde, görüntülenebilir 4096 renkten birini seçebilirsiniz
 Kırmızı, yeşil ve mavi olmak üzere 3 temel rengi “karıştırarak”.
Bu 3 rengin her biri 0 ile 15 arasında bir yoğunluğa, yani 16 tona sahip olabilir.
Aslında maksimum kombinasyon sayısı 16*16*16=4096, yani 16 KIRMIZI
çarpı 16 YEŞİL çarpı 16 MAVİ'dir.
Renk değeri işlemci veya COPPER ile ayarlanabilir:

move.w    #$000,$dff180    ; renk0'da SİYAH renk

dc.w    $180,$FFF    ; renk0'da BEYAZ renk

Bu örnekte iki uç değeri gördük: $FFF, yani BEYAZ, ve $000,
yani SİYAH. Rengi seçmek için, rengin
WORD'ünün şu şekilde oluştuğunu unutmamak gerekir:

dc.w    $0RGB

burada dördüncü sıfır kullanılmamaktadır, oysa:

R    =    KIRMIZI bileşeni (RED)
G    =	YEŞİL bileşen (GREEN)
B    =    MAVİ bileşen (BLU)

Aslında 15 ila 12 arasındaki bitler kullanılmamaktadır, 11 ila 8 arasındaki bitler
KIRMIZI, 7 ila 4 arasındaki bitler YEŞİL, 3 ila 0 arasındaki bitler MAVİ'dir.

Daha önce de belirtildiği gibi, her RGB rengi 0 ile 15 arasında bir değere sahip olabilir, yani 0
ile $F arasında onaltılık sistemde, bu nedenle rengi seçmek kolaydır:

$FFF    =    Beyaz
$D00    =    Kırmızı tuğla
$F00    =	Kırmızı
$F80    =    Kırmızı-Turuncu
$F90    =    Turuncu
$fb0    =    Sarı-Altın
$fd0    =    Sarı-Kadmiyum
$FF0    =    Limon
$8e0    =	Açık yeşil
$0f0    =    Yeşil
$2c0    =    Koyu yeşil
$0b1    =    Ağaç yeşili
$0db    =    Su
$1fb    =    Açık su
$6fe    =    Gök mavisi
$6ce    =    Açık mavi
$00f    =	Mavi
$61f    =    Parlak mavi
$06d    =    Koyu mavi
$c1f    =    Mor
$fac    =    Pembe
$db9    =    Bej
$c80    =    Kahverengi
$a87    =    Koyu kahverengi
$999    =    Orta gri
$000    =    Siyah


Şimdi sorun, copper'ın dikkatini WorkBench'ten uzaklaştırarak
COPPERLIST'imizden emirleri yerine getirmesini sağlamak; ancak
başka bir sorun daha var: bizimkini yerine getirttikten sonra,
çıkıp sisteminkini yeniden okumasını nasıl sağlayacağız???
Cevap: Bulunduğu yeri bir kağıda not etmeliyiz!!!
Yani: bunu OLDCOP adlı özel bir longword'e, yani
ESKİ COPPERLIST'e, sisteminkine yazıyoruz.
Ama sistemin copperlist'inin nerede olduğunu kime soracağız? Tabii ki işletim sistemine
!! Bunu sormak için kickstart'ın CHIP'inde bulunan
rutinleri çalıştırmamız gerekir!!! Bunu yapmak için her zaman
kickstart tarafından yazılan ve önceden belirlenmiş adresleme mesafelerini hesaplamak için kullanılan
$4 adresinde bulunan adresi referans almalıyız.
Bunu daha sonra anlatacağız.
$4 adresindeki long'u almak için şunu yapmanız yeterlidir:

MOVE.L    $4,a6    ; a6'da şimdi ExecBAse var

Daha iyi

MOVE.L    4.w,a6    ; Aslında 4 küçük bir sayıdır ve
					; 4.w olarak yazılabilir, bu da yer tasarrufu sağlar. (komutu
					; $00000004 ile yazmak yerine $0004 ile yazar, burada
					; ilk sıfırlar gereksizdir. YİNE DE TAŞINIR
					; BİR LONGWORD! 4,5,6,7 baytlarında bulunan long.

4'te bulunan adresi a6'ya koyduktan sonra,
doğru adresleme mesafesiyle JSR yaparak kickstart rutinlerini çalıştırabiliriz.
 Aslında, kickstart'ta hazır olan belirli rutinlere karşılık gelen kesin adresleme mesafeleri vardır.
Şimdi biliyoruz ki, örneğin, bir JSR -$78(a6) yaparsak
çoklu görev özelliğini devre dışı bırakırız!!!
 Yani sadece bizim programımız çalışır!
Hadi hemen yapalım! LEZIONE3a.s dosyasını bir Fx tamponuna yükleyin ve çalıştırın.

Ancak Exec her şeyi halletmez: kickstart, 256k uzunluğunda
1.2 veya 1.3 sürümünde, 512k uzunluğunda 2.0 veya 3.0 sürümünde,
library, yani “kütüphaneler” olarak adlandırılan, çağrılabilen hazır rutinler
ve her kickstart fiziksel olarak farklı olduğundan
örneğin, kick 1.3'te işletim sistemini devre dışı bırakan Exec rutini
$fc1000 adresindeyken, 1.2 veya 2.0'da
farklı adreslerde olabilir, sevgili tasarımcılar
çığır açan fikirlerinden birini ortaya attılar: "NEDEN 4'ÜN YERİNE
Aynı OFFSET'E JSR YAPARAK HER ZAMAN AYNI RUTİNİ YÜRÜTEBİLECEĞİMİZ BİR ADRES KOYMUYORUZ
 (YANİ ADRESLEME MESAFESİ) YAPARAK AYNI RUTİNİ HER ZAMAN YÜRÜTÜLEBİLİR? (P.S. JSR, BSR gibidir, ancak
belleğin herhangi bir yerinde rutinleri çalıştırabilir, bsr ise
32768 bayt ileri veya geri olanları çalıştırabilir).

Ve onlar da bunu yaptılar! Örneğin, işletim sistemini devre dışı bırakan Disable komutunu tüm kickstart'larda çalıştırmak için şunu yapmanız yeterlidir:

move.l    4.w,a6        ; Exec adresi a6'da
jsr    -$78(a6)    ; Engelle - multitask'ı engeller
bsr.w    myprogram
jsr    -$7e(a6)    ; Etkinleştir - çoklu görevi etkinleştirir

Her kickstart'ta rutin farklı bir adreste olacaktır, ancak bu şekilde
her zaman o rutini çalıştırdığımızdan emin oluruz.
İşletim sistemindeki çeşitli rutinlerin tüm adresleme mesafelerini bilmek yeterlidir,
 ancak bizim ilgilendiğimiz tek şey
sistem copperlist adresini kaydetmektir ve bunu yapmak için
kick rutinlerinden biri olan
graphics.library'ye başvurmamız gerekir, yani GRAFİK ile ilgilenen rutin, sadece
işletim sistemi düzeyinde, donanım düzeyinde değil.
Grafik kütüphanesine erişmek için APERTA'yı açmalıyız, yani şöyle yapmalıyız:

move.l    4.w,a6    ; Execbase a6'ya
lea    GfxName,a1   ; Açılacak kütüphane adının adresi a1'de
jsr    -$198(a6)	; OpenLibrary, EXEC'in
					; kütüphaneleri açan ve çıkışta
					; adresleme mesafelerini (Ofset)
					; hesaplamak için kullanılacak kütüphanenin temel adresini veren
move.l    d0,GfxBase    ; GFX temel adresini GfxBase'e kaydeder
....

GfxName:
dc.b    “graphics.library”,0,0	; NOT: karakterleri belleğe
								; kaydetmek için her zaman dc.b
GfxBase:                		; kullanın ve bunları “” veya ‘’
dc.l    0						; arasına yazın.

Bu durumda, Exec OpenLibrary rutinini kullandık. Bu rutin,
açılacak kütüphanenin adını içeren metnin adresinin A1'e
yerleştirilmesini gerektirir. Örneğin,
dosyalar veya benzerlerini yüklemek için “dos.library” gibi başka kütüphaneler açabilir, pencereleri açmak için “intuition.library” gibi kütüphaneler açabiliriz.
D0'dan döndükten sonra, söz konusu kütüphanenin adresi, yani JSR
grafiklerle ilgili ofsetlerle JSR yapmak için kullanılacak GfxBase gibi bir adres. JSR'lerin yanı sıra,
örneğin, mevcut sistem COPPERLIST adresinin
GfxBase'den 26 bayt sonra yer aldığını biliyoruz, bu nedenle
programımıza bu adresi OldCop etiketine kaydederek devam edeceğiz:

move.l    4.w,a6    ; Execbase in a6
lea    GfxName,a1   ; a1'de açılacak lib adının adresi
jsr    -$198(a6)    ; OpenLibrary, kütüphaneleri açan EXEC rutini
					; ve adresleme mesafelerini hesaplamak için
					; o kütüphanenin temel adresini verir
					; (Ofset)
move.l    d0,GfxBase    ; GFX temel adresini GfxBase'de kaydeder
move.l    d0,a6
move.l    $26(a6),OldCop    ; sistemin copperlist adresini kaydeder....
            
GfxName:
dc.b    “graphics.library”,0,0  ; NOT: karakterleri belleğe kaydetmek için
								; her zaman dc.b
GfxBase:                		; kullanın ve bunları “” veya ‘’
dc.l    0						; arasına yazın.

OldCop:
dc.l    0

Şimdi copperlist'imizi işaret edebiliriz, bir MouseWait
koyabiliriz ve ardından eski cop'u yeniden kurabiliriz; işaret etmekten kastım,
copperlist'imizin adresini COP1LC kaydına, yani $dff080'e koymaktır, bu
copperlist'e işaret eder, yani copper, adresi $dff080'de bulunan copperlist'i çalıştırır
: bu nedenle adresi
$dff080 adresine koymak yeterlidir, ardından copperlist'i başlatmak için
$dff088 (COPJMP1) kaydına herhangi bir şey yazmak yeterlidir,  bu kayıt STROBE olarak adlandırılır, sanki bir düğme gibi dokunmak yeterlidir (ANCAK CLR.W $dff088 KULLANMAYIN, sorunlara neden olur).
Böylece, $dff080 (COP1LC) içine başka bir liste girilene kadar, copperlist'imiz her kare için tekrar tekrar çalıştırılacaktır.
Bir sorun, $dff080'in sadece yazma modunda olmasıdır, aslında
“=c 080” yapmaya çalışırsanız WRITE'ın W'sini göreceksiniz.
Sistem copperlistini, yani asmone veya workbench'i görüntüleyen copperlistini geri koymak için, adresini $dff080'den okuyamayacağımızdan,
işletim sistemine onu nereye koyduğunu sormalıyız, ve bunu
kickstart rutinleriyle yapabilirsiniz: o
copperlist'in adresini aldıktan sonra, onu programımızın bir LONGWORD'üne kaydedeceğiz, sonra
copperlist'imizi işaret edeceğiz ve programın çıkışında eskisini geri koyacağız.

	move.l    4.w,a6    ; Execbase in a6
	jsr    -$78(a6)     ; Disable - multitasking'i durdur
	lea    GfxName,a1   ; Açılacak lib'in adının adresi a1'de
	jsr    -$198(a6)    ; OpenLibrary, EXEC'in
						; kütüphaneleri açan ve çıkışta
						; adresleme mesafelerinin (Ofset)
						; yapılacağı kütüphanenin temel adresini veren
	move.l    d0,GfxBase    ; GFX temel adresini GfxBase'e kaydeder
	move.l    d0,a6
	move.l    $26(a6),OldCop       ; sistemin copperlist adresini kaydeder
	move.l    #COPPERLIST,$dff080  ; COP1LC - COP'umuzu işaretler
	move.w    d0,$dff088		   ; COPJMP1 - COP'u başlatıyoruz
mouse:
	btst    #6,$bfe001
	bne.s    mouse

	move.l    OldCop(PC),$dff080 ; COP1LC - Sistem COP'unu işaret ediyoruz
	move.w    d0,$dff088         ; COPJMP1 - COP'u başlatıyoruz

	move.l    4.w,a6
	jsr    -$7e(a6)             ; Etkinleştir - Çoklu görev özelliğini etkinleştir
	move.l    gfxbase(PC),a1    ; Kapatılacak kütüphanenin tabanı
								; (kütüphaneler açılmalı ve kapatılmalıdır!!!)
	jsr    -$19e(a6)    	    ; Closelibrary - grafik kütüphanesini kapat
	rts

GfxName:
	dc.b    “graphics.library”,0,0  ; NOT: karakterleri belleğe kaydetmek için
									; her zaman dc.b kullanın
GfxBase:                			; ve bunları “” veya ‘’ içine alın
	dc.l    0

OldCop:
	dc.l    0

COPPERLIST:
	dc.w    $100,$200    ; BPLCON0 - Şekil yok, sadece arka plan
	dc.w    $180,0       ; Renk 0 SİYAH
	dc.w    $7f07,$FFFE  ; WAIT - $7f (127) satırını bekle
	dc.w    $180,$00F    ; Renk 0 MAVİ
	dc.w    $FFFF,$FFFE  ; COPPERLIST SONU

Bu örneği, öneriler ve değişikliklerle birlikte Ders 3b.s'de bulabilirsiniz.
F2 tamponuna veya başka bir tampona yükleyin ve Amiga'nın CHIP'lerinin “METALİ ÇALAN” ilk
programını hayranlıkla izleyin.

Copperlist üzerinde denemeler yaptınız mı? Güzel, şimdi
hareketli efektler yapmaya çalışalım. Ancak başlangıç olarak,
herhangi bir hareket yapmak için rutinleri
ekranı yeniden çizen elektronik fırça ile senkronize etmeniz gerektiğini belirtmeliyim. Bilmeyenler için
ekran saniyede 50 kez yeniden çizilir ve bize akıcı görünen hareketler,
 örneğin en iyi programlanmış video oyunlarındaki hareketler,
saniyenin ellinci saniyesinde gerçekleşen hareketlerdir. Daha önce
$dff006 kaydını kullandık, bu kaydın değeri sürekli değişir, çünkü
elektronik fırçanın konumu buradadır, fırça sıfırdan,
yani ekranın en üstünden başlar ve saniyede 50 kez
ekranın altına gelir. Zamanlamadan videoda hareketler yapan bir rutin yaparsak,
 işlemcinin gerçek hızında çalışacaktır, bu nedenle çok
hızlı olacaktır. Belirli bir video satırını beklemek için
$dff006'nın ilk baytını okumak yeterlidir, burada ulaşılan satırı, yani
dikey konumu (COPPER'ın WAIT'ine eşit) buluruz:

WaitLinea:
CMPI.B    #$f0,$dff006    ; VHPOSR - $f0 satırında mıyız? (240)
bne.s    WaitLinea    ; değilse, tekrar kontrol et
...

Bu döngü 240 satırını bekler, ardından
fare tuşuna basılmasını bekleyen fare rutini gibi
aşağıdaki komutlarla yürütme devam eder. WaitMouse'u da ekleyelim:

fare:
cmpi.b    #$f0,$dff006    ; VHPOSR - 240 satırında mıyız?
bne.s    fare        ; Henüz değilse, devam etme

bsr.s    ZamanlanmışRutin    ; Bu rutin her kare için 1
; kez çalıştırılır

bsr.s    MuoviCopper    ; Ekrandaki ilk hareket!!!!!
btst    #6,$bfe001    ; sol fare düğmesi basılı mı?
bne.s    mouse        ; değilse, fareye geri dön:
rts

Bu noktada, her video FRAME için, yani her kare için, yani saniyenin ellide birinde 1 kez, daha doğrusu 240 satıra ulaştığımızda çalıştırılan bir rutinimiz var.
her video FRAME için, yani her kare için, yani her saniyenin ellide birinde
ve daha kesin olarak, 240. satıra ulaştığımızda çalıştırılır
ve çalıştırıldıktan sonra, tekrar 240. satıra, yani bir sonraki kareye gelene kadar tekrar çalıştırılmaz
.

NOT: Görüntü, RASTER tekniği ile bir elektronik fırça
yardımcıyla çizilir. Fırça, sol üstteki ilk çizgiden çizmeye başlar,
 çizginin sonuna kadar sağa doğru ilerler, ardından
2. çizginin en solundan tekrar başlar ve sağa doğru ilerler, vb.
bizim okuma yaptığımız yol ile benzer şekilde: sol taraftan sağ tarafa doğru her satırı,
ilk satırdan başlayarak en alttaki son satıra kadar, SONRA
elektronik fırça ilk satırın solundaki ilk noktadan başlar, sanki
bir kitabın bir sayfasını okuduktan sonra bir sonraki sayfayı okumak yerine
aynı sayfayı okumaya başlıyormuşuz gibi. Sonuçta monitör tek ve
sadece üzerine yazabilir, fırça duvara yazmaz.

LEZIONE3c.s örneğini başka bir metin tamponuna yükleyin ve deneyin.
Bu örnek, fare sağ tuşuna bastığınızda bir WAIT'i aşağı hareket ettirir ve ardından bir sonraki rengi
görüntüler. Çıkmak için sol tuşa basın.

Lezione3c.s'yi anladınız mı? O zaman işleri biraz karmaşıklaştıralım!
Ders3c2.s'yi bir tampona yükleyin ve inceleyin, kaydırmayı durdurmak için bir satır kontrolü ekledim
.

Ders3c2.s'de her şey açık mı? Güzel, uygulamaya devam edelim ve
Ders3c3.s'yi yükleyin, burada tek bir WAIT satırı yerine 10 wait ile yapılmış bir gölgeli çubuk hareket ettiriliyor.
 Gittikçe zorlaşıyor!!!

Ders 3c3.s'den sonra hala hayatta mısınız? Bir sonraki dersle
kafanızı patlatın, Ders 3c4.s'de, adresleme mesafeleri gerçekleştirerek 10 BARRA etiketinden tek bir etikete geçiyoruz
.

Eh, o kadar da zor değildi. Zor olan şimdi Ders3d.s ile geliyor,
burada çubuk yukarı ve aşağı hareket ediyor ve çubuğun hızını da değiştireceğiz.

Ders3d.s'yi anladınız mı? Evet? İnanmıyorum! Anladığınızı sanıyorsunuz, olamaz
.... Devam etmeden önce bir kez daha gözden geçirin... Gözden geçirdiniz mi?
Peki... o zaman konuyla ilgili bir varyasyon yükleyin, Ders3d2.s

Şimdi Ders3e.s'ye geçmeye hazırsınız. Bu derste
RASTERBAR, yani renklerin döngüsel olarak kayması efekti nasıl yapılır açıklanıyor.

Başka bir özel durum: Lezione3f.s'deki bakır beklemeleriyle PAL bölgesine (FF'den sonra)
nasıl ulaşılır?

Lezione3.txt'yi tamamlamak için, Lezione3g.s ve Lezione3h.s'yi yükleyin.
Bu derslerde, yukarı ve aşağı yerine sağa ve sola kaydırma ele alınmaktadır.
Ardından, renkli görüntülerin yönetimi ve bunlar üzerinde uygulanabilecek efektlerin ele alınacağı DERS4.TXT'ye geçebilirsiniz. 


NOT:
LEZIONE4.TXT'deki Esempi4x.s, SORGENTI2 dizininde bulunur,
bu nedenle, o dizinden görüntüleri yükleyebilmek için “V DF0:SORGENTI2” komutunu vermelisiniz.
Ardından, LEZIONE4.TXT'yi
bu veya başka bir metin tamponuna yükleyin. (“r” ile)

* Buraya kadar geldiğiniz için tebrikler! En zor kısmı bitti! Şimdi devam ederek
ASM programlama mantığını öğrendiğiniz için kolayca anlayacaksınız!
