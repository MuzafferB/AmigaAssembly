VERY ADVANCED COPPER


This article will discuss advanced copper programming techniques.
The inspiration for this article came when I realised that
in lesson 11 of Randy's ASM course, it says that the “SKIP” instruction
in copper is useless. I disagree, and while
writing the course (to which I contributed by writing most of
lessons 7, 9, and 10), I pointed this out to Randy with some examples that I
sent him to include in lesson 11.
 Unfortunately, Randy did not do so, perhaps due to lack of time or perhaps because he lost the material I sent him on his hard drive
. However, I don't like the idea that the 
young coders who have read the Course (how many are there?) believe that “SKIP”
is useless, because this contradicts one of the Dark Axioms of
“Morbid Visions” philosophy:

“Amiga RULEZ => Perfect Amiga hardware => HW free of useless things.”

The “AGA” also has flaws, but the “OCS” does not. So I thought I'd write
this article to talk about “SKIP” and also about copper coordinate masking,
 a topic that is covered rather briefly in the course
. We will see, in fact, that SKIP proves to be very useful in
some cases, and that the possibilities for masking copper coordinates
are much broader than explained. For example, we will see that it is
possible to mask horizontal positions as well.
The techniques we will cover in this article will not allow you to do
do real-time Ray Tracing (otherwise Randy would have noticed),
but in some circumstances they can save you some precious
raster lines. And since the “Dark Texts of Deadly Coding” assert
that one of the goals of a coder is to exploit the hardware to the “maximum”,
you need to know how to exploit these techniques as well.
Let's start by giving a more detailed description of the format used by Copper
for the WAIT and SKIP instructions. These two instructions have a very
similar format, so we will describe them together. We will look at how
SKIP works later on. As you know,
 each Copper instruction consists of two words. The format of the first word is
described in the following table:

?FIRST WORD WAIT AND SKIP INSTRUCTIONS?
---------------------------------
?Bit 0 ?Always set to 1.

?Bits 7 - 1 ?Horizontal position of the electronic brush (HP).

?Bits 15 - 8 ?Vertical position of the electronic brush (VP).
?
Both of these instructions base their behaviour on the verification
of a certain condition, which is normally the electronic brush exceeding
the position specified by the VP and HP bit fields.
As we will see in a moment, it is possible to modify this condition by also taking into account the status of the blitter. We will describe the behaviour of SKIP later. Let's look at the second WORD:
?SECOND WORD WAIT AND SKIP INSTRUCTIONS?
-----------------------------------


?Bit 0 ?Set to 0 for WAIT, set to 1 for SKIP. ?Bits 7 - 1 ?Horizontal position of the electronic brush (HP). ?Bits 15 - 8 ?Vertical position of the electronic brush (VP). ? Both these two instructions base their behaviour on the verification of a certain condition, which is normally the exceeding of
?Bit 0 ?Set to 0 for WAIT, set to 1 for SKIP.

?Bits 7 - 1 ?Horizontal position mask bit (HE).

?Bits 14 - 8 ?Vertical position mask bit (VE).

?Bit 15 ?Blitter-finished-disable bit. Normally set to 1.
?
Bit 0 is used by the copper to understand whether the instruction in question is a WAIT
or a SKIP. The HE and VE bit fields are used to mask
the horizontal and vertical positions respectively. It works as follows: the
copper compares the position specified by HP and VP with the
position of the electronic brush, using only those bits where the
corresponding HE and VE bits are set to 1. For example, in a WAIT
, if we set all the HE bits to 1, the VE bits 8-12 to 0 and bits 13 and 14 to
1, the copper will wait for the electronic brush to reach the
horizontal position HP (because all the bits of HE are at 1) and a
vertical position such that bits 13 and 14 are equal to bits 13 and 14 of VP
(because they are the only bits of VE set to 1). Let's look at some
noteworthy cases. If we want to use ALL the bits of HP and VP (i.e. we do not use
masking), we must set all the bits of HE and VE to 1. In this
case, if we have a WAIT, we get that the second WORD takes the value
that you know well, $FFFE. If, on the other hand, we want a WAIT that completely ignores
the vertical position but considers all the bits of the
horizontal, we get that the second WORD is worth $80FE, as happens
in the example in lesson 11 of Randy's course. Bit 15
allows you to change the condition that the two instructions check: if
this bit is set to 1, they will behave normally; otherwise,
they must also check that the blitter has finished any
blitting (i.e. BLTBUSY, bit 14 of DMACONR must be 0). For example,
in the case of WAIT, with the bit in question set to 0, in addition to waiting for
the video position indicated by the VP and HP bits to be reached, it will also wait
for any blitting to finish. This can be useful if you
want to perform blitting synchronised with the position of the electronic brush
.

The more attentive readers will not have failed to notice that, due to the presence of the
Blitter Finished Disable bit, there is one less VE bit than VP bit.
More precisely, there is no bit in VE corresponding to the most significant bit of VP.
This means that this bit (bit 8 of the
vertical screen position) CANNOT be masked. This fact
has important consequences. In applications,
masking is used to have instructions that behave
the same way in different screen positions. The fact that bit 8 of the vertical position cannot be
masked therefore prevents having
instructions that behave the same way in areas of the screen with
different bit 8 of the vertical position. A typical example, also shown
by Randy, is that of WAIT, which waits for a certain horizontal position
regardless of the row in which it is located. If we tried
to implement such a WAIT by setting DC.W $00xx,$80FE, we would actually get
a WAIT that waits for a screen position such that bit 8 of the
vertical position is 0 and the horizontal position is xx. If this
instruction is executed when the position of the electronic brush has
bit 8 equal to 0, it waits for the electronic brush to reach the
horizontal position xx, as desired. Otherwise, since
bit 8 of the vertical position of the electronic brush is 1 and bit
8 of VP is 0, the WAIT condition is immediately verified, so this
instruction does NOT block the copper. Because of this phenomenon, Randy states
in his course that masking does not work in the lines between $80
and $FF. This is a very hasty conclusion. In fact, to
obtain the desired effect, simply use a WAIT that masks the low bits
of VP, as in the previous case, but with the non-maskable bit
of VP set to 1, i.e. a DC.W $80xx,$80FE. This WAIT in the lines
between $80 and $FF will have the non-masking bit of VP at the same
value as bit 8 of the vertical position of the electronic brush, and
therefore it will wait at each line for the horizontal position xx. As an example
of application, we offer you in the source MV_Code/Copper/mask1.s the effect
used by Randy to illustrate the masking of vertical positions,
realised (unlike Randy) in the lines between $80 and $FF.
At this point, dear readers, allow us to paraphrase the beginning
of the scroll text of the famous INTRO ‘KickReset’ by ‘Razor 1911’: ‘Randy
told us that this couldn't be done...nevertheless here it is!!’ :))

However, it should be noted that a WAIT masked with bit 8 of VP
set to 1, if executed in a line with bit 8 of the vertical position
equal to 0, will ALWAYS block the copper, as the line number
is always considered lower than the position specified in the WAIT.
This means that the WAIT in our example achieves the desired effect
(wait for horizontal position xx ONLY in lines between $80 and
$FF. What if we wanted to use masked WAITs across the entire screen?
Well, with a little extra work, this is also possible. The source
?MV_Code/Copper/mask2.s? is an implementation of the effect seen in the
previous source that works across the entire screen. Please refer to the
source comment for a description of the techniques used.

Let's now look at the ?SKIP? instruction. As mentioned, it has a format very
similar to that of WAIT. SKIP behaves as follows:
it causes the copper to skip the following instruction if the electronic brush
has passed the specified position. For example, consider the following
instructions:

dc.w    $4037,$ffff	; SKIP (jump) if line $40 is exceeded
ISTR1:    dc.w    $182,$0456    ; copper move instruction
ISTR2:    dc.w    $182,$0fff    ; copper move instruction

When the copper executes the SKIP instruction, it checks where the
electronic brush is located. If it has passed the position specified by the
VP and HP bits of SKIP (in the example HP=$36 and VP=$40), the copper skips
the following instruction (at address ISTR1) and executes the
instruction following it (i.e. the instruction at address ISTR2). If, on the other hand, the
electronic brush has not yet reached the indicated position,
the next instruction is executed normally as if SKIP were not there.
As we have already mentioned, position masking can also be applied to SKIP
using the VE and HE bits of the second WORD
in the same way as for WAIT; furthermore, for SKIP, the Blitter Finished Disable bit can also be
the Blitter Finished Disable bit can also be reset, so that the jump
is performed or not, ALSO taking into account the status of the Blitter.
Using ‘SKIP’, loops can be created in the copperlist. A loop
in the copperlist is a set of copper instructions that is repeated until
the electronic brush reaches a certain position. To
create the loop, the COP2LC register is also used. The mechanism is
illustrated by the following example:

in the main programme, a

move.l    #Copperloop,COP2LC(A5)    ; writes the address of the loop
; in the COP2LC register

and the following instructions are placed in the copperlist:

dc.w    $2007,$FFFE    ; WAIT line $20
Copperloop:
dc.w    $180,$F00    ; copper instructions of the loop
dc.w    $180,$0F0
dc.w    $180,$00F

.
.

dc.w    $180,$F0F    ; last instruction of the loop
dc.w    $4007,$ffff    ; SKIP (jump) if line $40 is exceeded
dc.w    $8a,0        ; COPJMP2 jumps to the beginning of the loop

dc.w    $182,$00F	; instruction outside the loop

The operation is very simple. After line $20, the copper enters the
loop. After executing all the instructions in the loop, it will arrive at SKIP. At
this point, if the electronic brush has NOT yet passed line $40
(i.e. it is higher up on the screen), the copper will NOT skip
the following instruction. However, the following instruction writes to COPJMP2
causing the copper to jump to the address written in COP2LC, i.e.
to the address of the first instruction in the loop. In this way, the loop is
repeated. After a certain number of repetitions, the electronic brush
will reach the $40 line. At this point, when
SKIP is executed again, it will cause the copper to skip the instruction that writes to COPJMP2; in
this way, it no longer jumps to the beginning of the loop but moves on to
execute the first instruction outside the loop.

What are loops used for in the copperlist? It is clear that we can always
do without them: instead of looping, we write the part of the copperlist that needs to be repeated as many times as necessary.
 This saves us
the SKIP and the instruction that writes to COPJMP2, which slow down the copper a little
. However, the use of loops has advantages: first of all,
we save memory because we only write the piece of
copperlist once. Secondly, if the repeated piece of copperlist needs to
be modified by the processor to achieve some effect,
naturally, by looping, the piece of copperlist will only need to be modified
once, greatly speeding up the processor's work.

The use of WAIT instructions within loops presents some problems.
Suppose we have a loop that repeats from line $20 to line $70, and
that within the loop there is a WAIT at line $38. What happens? The
first time the loop is executed, the WAIT blocks the copper.
 After line $38, the copper unblocks, reaches the end of the loop and repeats it. At
this point, since the electronic brush has passed line $38, the
WAIT no longer blocks the copper. As a result, the execution of the first
iteration of the loop will produce results very different from the
subsequent iterations. This is usually not what you want. In loops with the
copper, it would be desirable to be able to wait for a specific line of the loop at
each iteration. For example, you might want something like this:

CopperLoop:
; various instructions

wait 4 lines from the start of the iteration

; various instructions

repeat the loop until a certain line.

How can such a mechanism be achieved? It is necessary to use
WAIT with some bits of the vertical position masked.

For example, suppose we have a loop that extends over 16 raster lines
and we want to repeat it from line $10 to line $70, i.e. for 96
lines. Since 96/16=6, the copper will execute 6 iterations. Note that 96 is
divisible by 16 (there is no remainder), which means that the electronic brush
will reach row 96 exactly when the copper
finishes the sixth iteration. We want the
copper to stop at the fourth line from the start of the iteration in each iteration of the loop.
To achieve this, we use a WAIT in which we mask the most significant bits
of the vertical position. In this case, since the loop repeats
every 16 lines, the WAIT must behave in the same way every 16
lines, and must not consider the position differences between one group of 16
lines and another. Therefore, only the 4 least significant bits
(which form a group of 16 lines) need to be considered. To mask the
bits of the vertical position, as explained in the course, the
bits 8 to 14 of the second word of the WAIT are used. If one of these bits is
set to 1 (as is usually the case), the corresponding bit of the vertical position
is used; if, on the other hand, one of these bits is set to zero, the bit
corresponding to it is masked. Let's consider the following
WAIT instruction:

dc.w    $0301,$8FFE

This instruction waits for the fourth line of a group of 16 lines. Let's see
what happens in our example. The loop starts at line $20. The copper
executes the first instructions and encounters WAIT. It only considers the 4 least significant bits
of the position, so it waits for a line
that has those 4 bits at the value $3 (in fact, in the second WORD, bits 12, 13, and 14,
 which correspond to bits 5, 6, and 7 of the vertical position, are 0). This
happens at line $23. At this point, the copper unlocks. The second
iteration of the loop starts at line $30. Here too, the copper reaches the
WAIT and waits for a line that has the 4 least significant bits at the value $3,
which happens at line $33, i.e. again at the fourth line of the loop.
This behaviour is repeated at each subsequent iteration. If we wanted
8-line iterations with WAITs of this type, we would have to
leave only the 3 least significant bits of the position enabled. Note
that this technique is easy to implement only if the length of an
iteration is a power of 2. An example of a copper loop is the source
MV_Code/Copper/skip1.s.

A limitation to the use of WAIT in the manner we have shown is
due to the fact that the most significant bit of the vertical position cannot
be masked. This prevents us from creating loops that behave
in the same way both above line $80, where the most significant bit
is 0, and below, where the most significant bit is
1, precisely because we cannot ignore this difference by masking the
bit. The only solution is to use two loops, one to be executed above
$80 and one below, as shown in ?MV_Code/Copper/skip2.s?.

A slightly more sophisticated example is in the source ?MV_Code/Copper/skip3.s?.
In this source, the copperlists are written using ?MACRO? instead
of ?DC.W?. The ?MACRO? allow, for example, to write ?CMOVE
$0f0,COLOR00 instead of “DC.W $180,$0f0” and, in the case of “WAIT”, “WAIT $07,$60”
instead of “DC.W $6007,$FFFE”. This is a stylistic choice that, in my
opinion, makes the source code much cleaner and tidier. Furthermore, in this
way, many ‘distraction’ errors are avoided when writing
copperlists, such as forgetting that bit 0 of the first word of
a ‘WAIT’ MUST be set to 1. In the first part of the article, I did not
use them because I wanted to further confuse the explanation
of SKIP. I therefore recommend that everyone use them. In the source code
there are reduced versions of my macros, which you can take, improve
and include in your source code.

Of course, using SKIPs you can build loops that repeat
even within the same line of the screen. Due to the slowness
of the copper (1 instruction = 8 pixels), the number of iterations per line
is usually quite low. You can see an example in the source
?MV_Code/Copper/skip4.s?.

?The Dark Coder? / ?Morbid Visions?