
ASSEMBLER COURSE - LESSON 5

In this lesson, we will discuss horizontal and vertical scrolling of
figures, as well as some special effects.

Let's start with horizontal scrolling: the Amiga has a special register
dedicated to scrolling, the BPLCON1 ($dff102), which can scroll
the bitplanes one pixel at a time to the right for a maximum of 15 pixels.
This is achieved by the copper delaying the transfer of the bitplane data,
which arrives “after” one or more pixels. 
You can also scroll
even and odd bitplanes separately: odd bitplanes are
called PLAYFIELD 1 (1,3,5), while even ones are called PLAYFIELD 2 (2,4,6).
The $dff102, one word long, is divided into 2 bytes: the upper one, i.e. the one
on the left ($xx00), consisting of bits 15 to 8, is not used and must
be left at zero, while the lower byte ($00xx) controls scrolling:

$dff102, BPLCON1 - Bit Plane Control Register 1

BITS        NAME-FUNCTION

15    -    X
14    -    X
13    -    X
12    -    X
11    -    X
10    -    X
09    -    X
08    -    X
07    -    PF2H3    \
06    -    PF2H2     \ 4 bits for scrolling EVEN PLANES (playfield 2)
05    -    PF2H1     /
04    -    PF2H0    /
03    -    PF1H3    \
02    -    PF1H2     \4 bits for scrolling ODD PLANES (playfield 1)
01    -    PF1H1     /
00    -    PF1H0    /

In practice, you must act on the word in a similar way to the colour registers:
while in the colour registers you act on 3 RGB components, ranging from 0 to 15,
i.e. from 0 to $F, here we act on only 2 components ranging from $0 to $f, such as
the GREEN and BLUE of $dff180 (COLOR0):

dc.w    $102,$00XY    ; BPLCON1 - where: X= EVEN scroll bitplanes
;         Y= ODD scroll bitplanes

Some examples: (for the Copperlist)

dc.w    $102,$0000    ; BPLCON1 - scroll zero, normal position
dc.w    $102,$0011    ; BPLCON1 - scroll = 1 in both playfields,
; i.e. throughout the entire figure
dc.w    $102,$0055	; BPLCON1 - scroll = 5 for the entire figure
dc.w    $102,$00FF    ; ‘’ scroll at maximum (15) for the entire figure
dc.w    $102,$0030    ; ‘’ scroll = 3 only for EVEN bitplanes
dc.w    $102,$00b0    ; ‘’ scroll = $B only for ODD bitplanes
dc.w    $102,$003e    ; ‘’ scroll = 3 for EVEN bitplanes and $e
; for odd bitplanes

Nothing could be easier! Just change the value of scroll every FRAME to
create a scroll of the entire screen with a single MOVE!!!

Load the example Lesson5a.s to see how it works in practice.

In this example, $dff102 (BPLCON1) is changed at the beginning of
COPPERLIST, so the entire image moves. You can put many
$dff102 (BPLCON1) on various lines of the screen using the WAIT technique:
in the example Lesson5b.s there are two, which scroll the
words ‘COMMODORE’ and ‘AMIGA’ separately.
By placing one $dff102 (BPLCON1) per line with WAIT, you can create the well-known
waving effect of the figures.

Now let's look at vertical scrolling.
The easiest way to do this is to point the bitplane pointers in the copperlist higher or
lower in the image, so that
the image appears ‘higher’ or ‘lower’. Imagine looking at an
image through a rectangular hole, a kind of window (the video):

---------------
|        | 1
|        | 2
| AMIGA    | 3
|        | 4
|        | 5
---------------

In this case, we see the word AMIGA in the centre of the window, and we have
pointed the bitplanes to line 1 (i.e. the screen starts with line 1,
so AMIGA is on line 3).
If we point the screen to line 2, what happens?

---------------
|        | 2
| AMIGA    | 3
|        | 4
|        | 5
|        | 6
---------------

What happens is that AMIGA “moves up” because the window (the video) moves down, i.e. it points
lower in the figure. Since the motion is relative, if we see a tree moving from the window
of a moving train, in reality the tree is “still” and
we are moving. Something similar happens here. But to make a figure move up or
down, how much do we need to add or subtract from the
bitplane pointers? The bytes of a line. That is, 40 for a figure in LOW RES 320x256
and 80 for a figure in HIGH RES 640x256. Let's examine this case:

1234567890
..........
....++....
...+..+...
...++++...
...+..+...
...+..+...
..........

We have a hypothetical bitplane with 10 bytes per line, which can be zero (.)
or 1 (+), in which case it represents an “A”. To move the “A” upwards,
we need to “point” to a line lower down, i.e. 10 bytes lower, and
to point lower down, we need to ADD 10 (add.l #10,pointers)

1234567890
....++....
...+..+...
...++++...
...+..+...
...+..+...
..........
..........

Similarly, to move it down, we need to point to a line higher,
 i.e. 10 bytes higher (SUB.L #10,pointers):

1234567890
..........
..........
....++....
...+..+...
...++++...
...+..+...
...+..+...

In practice, to do this we must remember that the pointers in copperlist
have the plane address (which we will change) divided into 2 words. The problem
can be easily solved with a slight modification of the bitplane pointing
routine. In fact, we must ‘TAKE’ the address of the bitplanes from the
copperlist (the opposite operation), add or subtract 40 for the scroll,
and put the new address back in the copperlist with the old pointing routine.
 See the example Lesson5c.s, which uses this system.

Now load the example Lesson5d.s, which contains the two routines
for horizontal and vertical scrolling at the same time.

In Lesson5d2.s you will find another application of horizontal scrolling
together with $dff102 (bplcon1), namely distortion in motion.

We will now look at the most important registers for Amiga video special effects,
namely the MODULES: $dff108 and $dff10a (BPL1MOD and BPL2MOD). There are two module registers
because you can change the module separately for even
and odd bitplanes, such as BPLCON1 ($dff102). To work on our 
3-bitplane figure, we will need to act on both registers.
You may have noticed that when a LOW RES 320x256 image is displayed,
the BRUSH wraps every 40 bytes, while the data is all in sequence.
Similarly, in the case of a HI-RES 640x256 figure, the brush wraps
every 80 bytes. In fact, the module is automatically assigned when
you set $dff100 (BPLCON0): if LOWRES is selected, the copper knows
that a lowres image has 40 bytes per line, so starting to display
from the beginning of the screen (top left), it reads 40 bytes and writes the first line with the
electronic brush, then ‘wraps’ and writes the following data
to the next line, and so on. However, the figure in memory has all the data
consecutive, there is no ‘square’ figure! The memory is a row
of consecutive bytes, so each bitplane is a consecutive line of data:
imagine dividing the 256 lines of the screen, each 40 bytes long,
and placing them one after the other to make a single line of 40*256 bytes,
resulting in a line about 70 metres long: this would be the line as
it really is in memory. By setting the module to zero, as we have done up to
now, we let it “wrap” as LOWRES or HIGHRES commands, i.e. every 40
or 80 lines, and the display is normal. The value we put in the module
is ADDED to the bitplane pointers at the END of the line, i.e. once
byte 40 is reached. In this way, we can ‘SKIP’ bytes, which
are not displayed. For example, if we add 40 to each end of
the line, we skip an entire line, so one is displayed every two,
in fact:


- NORMAL IMAGE -

....................    ; at the end of this line, I ‘skip’ 40 bytes
.........+..........
........+++.........    ; and display this line, then “skip”...
.......+++++........
......+++++++.......    ; and display this line, then ‘skip’...
.......+++++........
........+++.........    ; and display this line, then ‘skip’...
.........+..........
....................
    ; and display this line, then ‘skip’...

The result will be that we only display one line every two:

- IMAGE MODULE 40 -

....................    ; at the end of this line, I ‘jump’ 40 bytes
........+++.........    ; and display this line, then ‘jump’...
......+++++++.......    ; and display this line, then “jump”...
........+++.........    ; and display this line, then ‘jump’...
....................	; and display this line, then ‘jump’...
....................
....................
....................
....................

The figure will appear squashed, half as long, and we will also display
the bytes ‘below’ our figure, since the screen always ends at
line 256: basically, we always display 256 lines, but within a range of 512
lines, of which we only display one line every two.
Try reloading Lesson5b.s and modify the modules in the copperlist:

dc.w    $108,40        ; Bpl1Mod
dc.w    $10a,40        ; Bpl2Mod

You will notice that the image is half as high as expected and the lower part
of the screen is filled with bitplanes that ‘advance’, i.e. from the second
bitplane displayed below the first, and from the third displayed below the second
while after the third you can see the memory after the figure, In short, 256 lines are displayed
within a radius of 512.
Try skipping 2 lines, skipping 80 bytes every 40 displayed:

dc.w    $108,40*2    ; Bpl1Mod
dc.w    $10a,40*2    ; Bpl2Mod

The figure will be halved again, and other bytes will appear at the bottom.
You will see the height halved by continuing with modules of 40*3,
40*4,40*5, etc., until the drawing becomes illegible.
If you choose a module that is not a multiple of 40, you will cause the image to “flake”,
as the copper will display the lines starting not from their
beginning but from a different part each time.

See Lesson 5e.s for a quick routine that adds 40 to the module to
halve the figure.

Modules can be negative as well as positive. In this case,
the negative number in question is subtracted at the end of each line displayed.
This can create strange effects: imagine setting the
module to -40: in this case, the copper reads 40 bytes, displays them in
one line, then goes back 40 bytes, displays the same data in the
next line, then goes back 40 bytes, and so on. In practice, it does not
go beyond the first 40 bytes and each line copies the first line: if, for
example, we have the first line all black, the others will reproduce this and the
screen will be all black. If there were only one dot in the middle of the line,
it would be redrawn every line and a vertical line would be produced:

..........+........    ; line 1 (always redrawn: module -40!)
..........+........    ; line 2
..........+........    ; line 3
..........+........    ; line 4
..........+........    ; line 5
..........+........    ; line 6
..........+........    ; line 7
..........+........    ; line 8
..........+........    ; line 9
..........+........    ; line 10

Similarly, each colour causes a kind of ‘bleed’ to the end
of the screen. This effect has been used in games such as Full Contact, in the
red-sector demomaker and in many other programmes.

Let's see how it works in practice in Lesson 5f.s

Impressive and simple to do, don't you think? It is also known as the FLOOD effect.
The module is added, at the end of each line, to the bitplane pointers that
‘walk’ through the memory to display the entire image.
So by adding a negative number, we subtract.
In this specific case, after transferring each line, the pointers take on the value X+40, are then incremented by the value of the module (=-40: the
length in bytes of a single bitplane line, in negative): decremented
by “40” bytes, they finally take on the starting value X again.

+---->->->--------+
| |
|BPL POINTER= X+ 0......................................39
| | |
|START OF LINE -+---xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx---+- LAST BYTE ->
| (X) | | | |     (X+39)
| +---+ +---+
| |
| NEXT LINE -+----xxxx[...]
^ | |
| +-X+ 40 (after the transfer, the pointer has moved
^ | the entire length of the line (40 bytes), stopping
| | at the 40th, which is none other than the first byte of the
^ | next line)
| +-> (Here, the value of the module assigned to it is ADDED to the pointer of each plane
| |: in this case, “-40”)
| +-> X=X+(-40) => X=X-40 => X=0 >-+
| | |
+----------<-<-<--+------------<-<-<---------------+

See? The pointer, just when it gets to the best part, arrives at X+40, is subtracted
by 40 and returns to the beginning of the line just transferred, displaying
the same line again in the one below, as the electronic brush moves
always downwards and draws what it is ‘told’ to at the point where it
is, in this case always the same line, repeated.

In Lesson 5f.s, we also saw the mirror effect, i.e. the -80 module.
Let's look at it on its own in the example in Lesson 5g.s.

Now let's see how to use many consecutive $dff102 (BPLCON1) in copperlist
to create a wave effect: load Lesson5h.s

Let's see a particular use of scrolling with bitplanes: Lesson5i.s is
a so-called GRAPHIC-SCANNER, an ancestor of GFX-RIPPERS, i.e. programs
that ‘STEAL’ figures from memory. This short program simply serves
to show the CHIP memory, with all the figures visible in it.

Another example related to the modules in Lesson5l.s, this time to make a
‘lengthening’ of the figure instead of halving it.

In Lesson 5m.s, we will see another method for moving the image up and down,
 this time by modifying DIWSTART ($dff08e)
The DIWSTART and DIWSTOP registers determine the start and end of the ‘video window
’, i.e. the rectangular part of the screen where the
bitplanes are displayed. DIWSTART contains the YYXX coordinates of the top left corner,
where the ‘video rectangle’ begins, while DIWSTOP contains the coordinates
of the bottom right corner:

DIWSTART
o----------------
|        |
|        |
|        |
|        |
|        |
----------------o
DIWSTOP

However, not all possible coordinates
XX and YY can be indicated in these registers. In fact, both the XX and YY positions are bytes, and as we know, bytes
can reach 256 different values ($00-$ff).
Let's see in which positions we can start the video window with DiwStart
and in which we can end it with DiwStop.

dc.w    $8e,$2c81    ; DiwStrt YY=$2c,    XX=$81
dc.w    $90,$2cc1    ; DiwStop YY=$2c(+$ff), XX=$c1(+$ff)

The normal video window has these DIWSTRT and DIWSTOP values; the vertical position
, YY, works exactly like the YY position of the copper waits
: in fact, if you wait for a line above $2c with the copper and make some
shading, it will not be visible because it is too high, or in any case it will be
above any visible figure; similarly to the wait after the $FF line, the
position starts again from $00, which would be $FF+1.
 In fact, the screen starts from the vertical position $2c, and ends at $2c after line 256, i.e. $FF+$2c,
i.e. $12b, displaying a total of 256 lines, as expected.
For example, for a screen 200 lines high, we will have to set this DiwStop:

dc.w    $90,$f4c1	; DiwStop YY=$2c(+$ff), XX=$f4

In fact, $f4-$2c = 200. If we indicate $00,$01... we will wait after line $ff.
The limitations are as follows: DiwStart can be positioned vertically in
one of the YY positions from $00 to $FF, i.e. up to line 200. The video window
therefore cannot start from line 201 or later, always before.
For DIWSTOP, the designers used a trick: if the value
YY is below $80, i.e. 128, then it waits for the lines below $FF, so $2c
refers to $2c+$FF, i.e. line 256. If the number is greater than $80
, then it takes it as it is (since there are no $80+$ff=383 lines!!),
and waits for lines 129, 130, etc. Therefore, if DIWSTART can
reach a maximum of line $FF starting from ZERO, DIWSTOP can
exceed line $FF and reach the bottom of the screen, but it cannot
start from lines lower than $80. This trick was done by considering
numbers with bit 7 set to zero (those before $80, in fact) as if they had a
hypothetical bit 8 set, which increases everything by $FF. When bit
7 is set (the numbers after $80 have set it)
 , the ghost bit disappears and the numbers are taken for what they are.
As for the horizontal line, the diwstart can start from
any XX from $00 to $FF, therefore up to position 256 (remember, however,
that the screen starts from position $81 and not from $00, so it is position
126 from the beginning of the screen!). DiwStop, on the other hand, with $00 indicates line
127, and continuing can reach the end of the right side of the screen,
in fact it has the ‘ghost’ bit 8 always at 1, so $FF is always added
to its value of XX.
Ultimately, DiwStart can be positioned in any of the positions
XX and YY from $00 to $FF, while DiwStop can be positioned horizontally
after line $FF, and vertically from line $80 to line $FF, after which
the numbers from $00 to $7f are, as in the wait after line $FF, lines 201,202
etc., so $2c is $2c+$ff.

This topic is covered in Lesson5m2.s, Lesson5m3.s and Lesson5m4.s.


To finish LESSON5, load Lesson5n.s, which is a summary of the
previous lessons and is also the first listing that plays music.

Once you have understood this example, all you have to do is load LESSON6.TXT.
