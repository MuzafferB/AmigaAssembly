
ASSEMBLER COURSE - LESSON 3

Now we will proceed with the practical part, but first I recommend that you load the
68000.TXT text file into a text buffer. This file is a summary of lesson 2.
It may be useful if you do not remember an address or an instruction
instruction while reading the listings in this lesson, which assume
familiarity with the addresses and instructions covered previously.
That text explains all the addresses, even those that are
almost never used, so read it but don't worry if you don't understand
the addresses with INDEX, as they won't be used in lesson 3!

In this lesson, we will start to see something on the screen: to
do this, we need to write a COPPERLIST, i.e. a program for the
COPPER chip that handles graphics, which we have already used to
change the screen colour ($dff180 is a copper register called
COLOR00).
For now, however, we have only made changes with the processor
directly in the registers, and as you may have noticed when running the listings
with AD one instruction at a time, when we put a value in COLOR00 (i.e.
$dff180), there is only a very brief flash, and the normal colour of the
operating system, i.e. ASMONE, immediately returns. Only by running a loop in which
a number is continuously entered can the entire screen be coloured, but
once you exit the program, the colour inexorably returns to
. This happens because the screen we see with windows, text
and everything else is the result of a COPPERLIST, specifically a
system COPPERLIST. The copperlist is nothing more than a kind of:

MOVE.W    #$123,$dff180    ; COLOR00 - enter colour 0
MOVE.W    #$123,$dff182    ; COLOR01 - enter colour 1
etc...

This is executed continuously, which explains why if we change the colour with the
processor, the system colour immediately returns: because
the copperlist redefines all colours every fifty seconds!!!!
You will realise that in order to display images properly, it is not possible to
continue looping and trying to fight with the system copperlist
which simultaneously redefines everything, but we will have to get rid of
the system copperlist and make our own. NOTHING COULD BE EASIER!
As I mentioned earlier, the copperlist is nothing more than a string of MOVE
commands that put values in the COPPER registers, i.e. those $dffxxx;
however, these are not moves made with the processor, but made by the copper
itself, which, not surprisingly, executes this COPPERLIST independently while
we are doing other things with the processor... This is one of the reasons
why PCs don't have LIONHEARTH or PROJECT X from the Amiga.
We will therefore have to write a LISTING, as we do for the 68000,
after which we will have to inform the COPPER where to find ours so that it can
read and execute it instead of the one in WorkBench.
The copper has ONLY 3 instructions, of which only 2 are actually used:
the two used are MOVE and WAIT; the one that no one uses is
SKIP, so we'll only talk about that if we find it in an example listing
.
MOVE is VERY EASY: you know a:

MOVE.W    #$123,$dff180    ; Enter the RGB colour in COLOR00

This translates into copperlist as:

dc.w    $180,$123    ; the numbers are put directly into memory with
; dc.w, that's all you need to learn
; just 2 instructions!

That is: you must first put the destination address, without the $dff
as we have already seen when we put $dff000 in a0, just do $180(a0):
in the same way, the designers thought it best to save us the
trouble of doing $DFF every time, so just put $180, or
$182 or any other COPPER register, in fact ONLY the Copper registers
can be written by COPPERLIST, and you can only access
even registers, such as $180,$182.Never $181, $183!!!! Furthermore, you can only
modify one WORD at a time. As you have seen, COPPERLIST is not
assembled like the 68000 commands, which are transformed by
INSTRUCTIONS such as RTS, MOVE.. at $4e75, etc., but rather you must put the BYTES as they
are actually in memory and as they are read by the COPPER coprocessor: for the
COPPERLIST, we must use the DC command to put it in memory
by force of BYTES, but it is very easy. For example, to define the first 4 colours:

COPPERLIST:
dc.w    $180,$000    ; COLOUR 0 = BLACK
dc.w    $182,$f00    ; COLOUR 1 = RED
dc.w    $184,$0F0    ; COLOUR 3 = GREEN
dc.w    $186,$00F	
; COLOUR 4 = BLUE

Do you remember the colour format? RGB=RED, GREEN, BLUE.
For help at any time on the meaning of the $dffXXX registers
type ‘=C 180’ or ‘=C number’ and you will see a brief summary (in English).
For example, type ‘=c 006’ and you will see the name and explanation of the register
you used to flash the colour. To see all the registers,
 simply type ‘=C’.

WAIT is used to wait for a certain line on the screen, for example
if you want to make the background colour (colour0) black up to the middle, while
the lower half is blue, just put

dc.w    $180,0        ; colour 0 BLACK

followed by a WAIT that waits for half of the screen, after which

dc.w    $180,$00F    ; colour 0 BLUE

With this trick, you can change the entire palette (colours) at any
line of the video, something that is not even possible on a PC in VGA. In fact,
 even though Amiga games usually have screens with only 32 colours,
by changing the colour palette every now and then as the screen scrolls down,
 you can achieve more shades than a 256-colour VGA, especially if
you consider that with a single background colour you can create a gradient
by changing the colour on each line, as we will do in the first listing of
this lesson. The WAIT command appears in this form:

dc.w    $1007,$FFFE    ; WAIT coordinate X= $10, Y= $07

This command means: WAIT FOR HORIZONTAL LINE $10, column 7 (i.e.
the seventh point from the left; the points are called PIXELS).
The $FFFE means WAIT, and must be included every time, while the
first byte is the horizontal line (x) to wait for and the second is the
vertical (y).
The screen is made up of many dots arranged next to each other,
like a sheet of paper with very small squares, such as graph paper.
To indicate the point (pixel) located (as in battleship) at
position 16.7, i.e. 16 points down from the top edge of the sheet
and 7 points to the right from the left edge, I will indicate $1007. ($10=16!).
Usually, it is sufficient to indicate the horizontal line at its beginning (the position
is $07 instead of $01 because the latter is outside the monitor at the far
left).
The WAIT instruction is also used to terminate the COPPERLIST: in fact,
 to indicate the end of the COP, a

dc.w    $FFFF,$FFFE    ; End Copperlist

By convention, Copper considers this to be the end, also because it indicates to
wait for a line that does not exist! (the copperlist then starts again from the beginning).
Rumours spread some time ago that two end
copperlist instructions were needed instead of just one for some older Amiga models, but this seems to
be mass psychosis, since no one has ever used two and everything has always
worked fine.

One last thing: to make our copperlist, which for now has no
drawings, only shades, we need to disable the BITPLANES, i.e.
the BIT PLANS that overlap to create the figures.
To do this, just add the line DC.W $100,$200, i.e. put
the value $200 in $dff100, which is the bitplane control register.

NOW WE ARE ABLE TO COMPLETELY MAKE THE COPPERLIST THAT WAITS FOR
HALF OF THE VIDEO AND CHANGES COLOUR!

COPPERLIST:
dc.w    $100,$200    ; BPLCON0 No figure, only the background
dc.w    $180,0        ; Colour 0 BLACK
dc.w    $7f07,$FFFE    ; WAIT - Wait for line $7f (127)
dc.w    $180,$00F    ; Colour 0 BLUE
dc.w    $FFFF,$FFFE    ; END OF COPPERLIST

Considering that to check the functioning of your copperlists
you will need to create colour shades, here is a REFERENCE TABLE FOR
CHOOSING COLOURS WITH COPPER:

The Amiga has 32 colour registers for 32 different colours:

$dff180        ; colour0 (background)
$dff182        ; colour1
$dff184        ; colour2
$dff186        ; colour3
...
$dff1be        ; colour31

In each of these 32 colour registers, you can select one of the 4096 colours
that can be displayed by “mixing” the 3 basic colours RED, GREEN and BLUE.
Each of these 3 colours can have an intensity from 0 to 15, i.e. 16 tones.
In fact, the maximum number of combinations is 16*16*16=4096, i.e. 16 RED
multiplied by 16 GREEN multiplied by 16 BLUE.
The colour value can be set with the processor or with COPPER:

move.w    #000,$dff180    ; BLACK colour in colour0

dc.w    $180,$FFF    ; WHITE colour in colour0

In this example, we have seen the two extremes: $FFF, i.e. WHITE, and $000,
i.e. BLACK. To choose the colour, it is necessary to bear in mind that the
WORD of the colour is composed as follows:

dc.w    $0RGB

where the fourth zero is unused, while:

R    =    RED component
G    =    GREEN component
B    =    BLUE component

In fact, bits 15 to 12 are not used, bits 11 to 8 are
RED, bits 7 to 4 are GREEN, and bits 3 to 0 are BLUE.

As already mentioned, each RGB colour can have a value from 0 to 15, i.e. from 0
to $F in hexadecimal, so it is easy to choose the colour:

$FFF    =    White
$D00    =    Brick red
$F00    =    Red
$F80    =    Red-Orange
$F90    =    Orange
$fb0    =    Yellow-gold
$fd0    =    Cadmium yellow
$FF0    =    Lemon
$8e0    =	Light green
$0f0    =    Green
$2c0    =    Dark green
$0b1    =    Tree green
$0db    =    Aqua
$1fb    =    Light aqua
$6fe    =    Sky blue
$6ce    =    Light blue
$00f    =    Blue
$61f    =	Bright blue
$06d    =    Dark blue
$c1f    =    Violet
$fac    =    Pink
$db9    =    Beige
$c80    =    Brown
$a87    =    Dark brown
$999    =    Medium grey
$000    =	black


Now the problem is just how to force the copper to execute commands from
our COPPERLIST, diverting its attention from the WorkBench; but
there is also another problem: if we make it execute ours, how do we
get it to reread the system one after we exit?
Answer: You have to write down where it was on a piece of paper!
In other words, we write it down in a special longword called OLDCOP, or
OLD COPPERLIST, which is the system one.
But who do we ask where the system copperlist is? The operating system, of course!
 To ask it, we have to run some routines
that are in the kickstart CHIP! To do this, we always have to
take as a reference the address found in address $4, which
is written by kickstart and contains the address from which we can
make the predefined addressing distances, which we will discuss later.
To collect the long at address $4, just do the following:

MOVE.L    $4,a6    ; In a6 we now have the ExecBAse

Or rather

MOVE.L    4.w,a6    ; In fact, 4 is a small number and can be written
; 4.w, which saves space. (writes the instruction
; with $0004 instead of writing it with $00000004, where
; the first zeros are not needed. IT IS STILL MOVED
; A LONGWORD! The long contained in the 4 bytes 4,5,6,7.

Once we have put the address that was contained in $4 in a6, we can execute the
kickstart routines by doing JSRs with the correct addressing distance.
 In fact, there are precise addressing distances that
correspond to certain routines already prepared in the kickstart.
Now we know that if we do, for example, a JSR -$78(a6), we disable
multitasking!!! That is, only our program is executed!
Let's do it right away! Load LESSON3a.s into an Fx buffer and execute it.

However, Exec does not take care of everything: the kickstart, which is 256k long if it is
version 1.2 or 1.3, or 512k long if it is 2.0 or 3.0, is divided into
libraries, which are ‘collections’ of ready-made routines that can be 
called, and since each kickstart is physically different, in the
sense that, for example, the Exec routine that disables the operating system
in kick 1.3 could be at $fc1000, while in 1.2 or 2.0
at different addresses again, the dear designers had one of
their brilliant ideas: "WHY DON'T WE PUT AN ADDRESS AT LOCATION 4
FROM WHICH THE SAME ROUTINE CAN ALWAYS BE EXECUTED BY DOING A JSR TO THE SAME
OFFSET (I.E. ADDRESSING DISTANCE)? (P.S. JSR is like BSR, except that
it can execute routines anywhere in memory, while bsr
can only execute them if they are within 32768 bytes forward or backward).

And that's what they did! For example, to execute Disable,
which disables the operating system, on all kickstarts, just do:

move.l    4.w,a6		; Exec address in a6
jsr    -$78(a6)    ; Disable - blocks multitasking
bsr.w    myprogramme
jsr    -$7e(a6)    ; Enable - re-enables multitasking

In each kickstart, the routine will be at a different address, but by doing it this way,
 we are always sure to execute that routine.
All you need to know are the addressing distances of the various routines
of the operating system to execute them, but we are only interested in
saving the address of the system copperlist, and to do this we need to
turn to a part of the kick routines called:
graphics.library, which is the one that deals with GRAPHICS, only
at the operating system level, not at the hardware level.
To access the graphics library, it must be OPEN, so we have to do the following:

move.l    4.w,a6        ; Execbase in a6
lea    GfxName,a1    ; Address of the name of the lib to be opened in a1
jsr    -$198(a6)    ; OpenLibrary, EXEC routine that opens
; the libraries and outputs the
; base address of the library from which to calculate
; the addressing distances (Offset)
move.l    d0,GfxBase    ; save the GFX base address in GfxBase
....

GfxName:
dc.b    ‘graphics.library’,0,0    ; NOTE: to store characters in memory
; always use dc.b
GfxBase:                ; and put them between ‘’, or “”
dc.l    0

In this case, we used the Exec OpenLibrary routine, which requires
that the address of the text with the name of the library to be
opened be placed in A1. For example, we could open other libraries such as ‘dos.library’ to
load files or similar, ‘intuition.library’ to open windows, etc.
Once executed, on returning from d0, the address of the library in
question, i.e. an address such as GfxBase from which to make JSRs
with offsets relating to graphics. In addition to JSRs, we also know
that, for example, the address of the current system COPPERLIST is
located at $26 bytes after GfxBase, so we will continue our
program by saving that address in a label OldCop:

move.l    4.w,a6        ; Execbase in a6
lea	GfxName,a1    ; Address of the name of the lib to open in a1
jsr    -$198(a6)    ; OpenLibrary, EXEC routine that opens
; libraries and outputs the
; base address of that library from which to make
; addressing distances (Offset)
move.l    d0,GfxBase    ; save the GFX base address in GfxBase
move.l    d0,a6
move.l    $26(a6),OldCop    ; save the address of the copperlist....
            ; system

GfxName:
dc.b    ‘graphics.library’,0,0    ; NOTE: to put
; characters in memory, always use dc.b
GfxBase:                ; and put them between ‘’, or “”
dc.l    0

OldCop:
dc.l    0

Now we can point to our copperlist, we can put a MouseWait
and then restore the old cop; by pointing, I mean putting the address
of our copperlist in the COP1LC register, i.e. $dff080, which is the
pointer to the copperlist in the sense that the copper executes the copperlist
whose address is in $dff080: 
Therefore, just put the address in
$dff080, then to start the copperlist, just write in the register
$dff088 (COPJMP1) anything, as long as it is written or read that it
starts the copperlist. It is a register called STROBE, like a button
that you just need to touch (DO NOT USE CLR.W $dff088, as it causes problems).
Our copperlist will then be executed repeatedly for each frame
until another one is placed in $dff080 (COP1LC).
One problem is that $dff080 is write-only, so if you try to do
‘=c 080’ you will see the W for WRITE.
In order to restore the system copperlist, the one displayed by
the asmone or the workbench, since we cannot read its address from $dff080, we will have to
ask the operating system where it put it, and this can be done
with kickstart routines: once we have obtained the address of that
copperlist, we will save it in a LONGWORD of our program, then we will point
our copperlist, and at the end of the program we will put the old one back in place
.

move.l    4.w,a6        ; Execbase in a6
jsr    -$78(a6)    ; Disable - stops multitasking
lea    GfxName,a1	; Address of the name of the lib to open in a1
jsr    -$198(a6)    ; OpenLibrary, EXEC routine that opens
; the libraries and outputs the
; base address of the library from which to calculate the
; addressing distances (Offset)
move.l    d0,GfxBase    ; save the GFX base address in GfxBase
move.l    d0,a6
move.l    $26(a6),OldCop    ; save the address of the system copperlist
;
move.l    #COPPERLIST,$dff080    ; COP1LC - Point to our COP
move.w    d0,$dff088        ; COPJMP1 - Start the COP
mouse:
btst    #6,$bfe001
bne.s    mouse

move.l    OldCop(PC),$dff080    ; COP1LC - Point to the system COP
move.w    d0,$dff088        ; COPJMP1 - Start the COP

move.l    4.w,a6
jsr    -$7e(a6)    ; Enable - re-enable Multitasking
move.l    gfxbase(PC),a1    ; Base of the library to be closed
; (libraries must be opened and closed!!!)
jsr    -$19e(a6)    ; Closelibrary - close the graphics library
rts

GfxName:
dc.b    ‘graphics.library’,0,0    ; NOTE: to store
; characters, always use dc.b
GfxBase:                ; and put them between ‘’, or “”
dc.l    0

OldCop:
dc.l    0

COPPERLIST:
dc.w    $100,$200    ; BPLCON0 - No figures, only the background
dc.w    $180,0        ; Colour 0 BLACK
dc.w    $7f07,$FFFE	; WAIT - Wait for line $7f (127)
dc.w    $180,$00F    ; Colour 0 BLUE
dc.w    $FFFF,$FFFE    ; END OF COPPERLIST

You will find this example with suggestions and modifications in Lesson 3b.
Load it into buffer F2 or any other buffer and admire the first
programme of the course that ‘BEATS THE METAL’ of the Amiga CHIPS.

Have you experimented with the copperlist? Good, now let's
create some moving effects. To begin with, however, I must inform you that
to make any movement, you need to synchronise the routines with the
electronic brush that redraws the screen. For those who don't know,
the screen is redrawn 50 times per second, and the movements that appear
fluid, such as those in well-programmed video games, are movements
that coincide with the fiftieth of a second. We have already used the register
$dff006, which, as we have seen, changes value continuously, precisely
because it contains the position of the electronic brush, which starts from zero,
i.e. from the top of the screen, and reaches the bottom 50 times per
second. If we create a routine that makes movements on the screen without
timing it, it will run at the actual speed of the processor, which is too
fast to see anything. To wait for a certain video line, just read
the first byte of $dff006, where we find the line reached, i.e. the
vertical position (equal to the WAIT of the COPPER):

WaitLine:
CMPI.B    #$f0,$dff006	; VHPOSR - Are we at line $f0? (240)
bne.s    WaitLine    ; if not, check again
...

This cycle waits for line 240, after which execution continues with
the following instructions, such as the mouse routine that waits for the
key to be pressed, after which execution continues. Let's also insert WaitMouse:

mouse:
cmpi.b    #$f0,$dff006    ; VHPOSR - Are we at line 240?
bne.s    mouse        ; If not yet, don't go on

bsr.s    TimedRoutine    ; This routine is executed once
; for each frame

bsr.s    MoveCopper    ; The first movement on the screen!!!!!
btst    #6,$bfe001    ; left mouse button pressed?
bne.s    mouse        ; if not, return to mouse:
rts

At this point, we have a routine that executes a routine only once for
each video FRAME, i.e. for each frame, i.e. once every fifty
seconds, and more precisely, it is executed as soon as we reach
line 240, after which, once executed, it will not be executed again
until we are back at line 240, the next frame.

NOTE: The image is drawn using the RASTER technique with an electronic brush,
 which starts drawing from the first line at the top left,
continues to the right until the end of the line, then starts again from the far
left of line 2, to go to the right, etc., similar to the
path we take to read: each line from left to right,
starting from the first at the top to the last at the bottom, AFTER which the
electronic brush starts again from the first line, first point on the left, as
if we had finished reading a page of a book and started reading it again
instead of reading the next page. After all, there is only one monitor and
it must write on that alone; the brush does not write on the wall.

Load the example LESSON3c.s into another text buffer and try it out.
This example moves a WAIT down and then the next colour
when you press the right mouse button. Left button to exit.

Have you understood Lesson3c.s? Then let's complicate things a little! Load
Lesson3c2.s into a buffer and study it. I have added a line reached check
to stop scrolling.

Is everything clear in Lesson3c2.s? Good, let's continue with the practice by loading
Lesson3c3.s, where a shaded bar made with 10 WAITs
instead of a single WAIT line is moved. Getting harder and harder!!!

Are you still alive after Lesson3c3.s? Rack your brains with the next lesson,
 Lesson3c4.s, where we go from 10 BAR labels to a single label
by executing addressing distances.

Well, that wasn't so difficult. The hard part comes now with Lesson 3d.s,
where the bar goes up and down, and we also change the speed of the bar.

Did you understand Lesson 3d.s? Yes? I don't believe it! You think you understand, it can't
be... I would review it again before continuing... have you reviewed it?
Well.... then load a variation on the theme, Lesson3d2.s

Now you are ready to tackle Lesson3e.s, which explains how to make
a RASTERBAR, i.e. a cyclic colour scrolling effect.

Another special case: How do you reach the PAL area (after $FF)
with copper waits in Lesson3f.s.

To complete lesson3.txt, load Lesson3g.s and Lesson3h.s,
which concern scrolling to the right and left instead of up and down.
After that, you will be ready for LESSON4.TXT, which will deal with the management
of coloured images and the possible effects on them!
 


NOTE:
The Esempi4x.s files in LESSON4.TXT are located in the SORGENTI2 directory,
so you must type ‘V DF0:SORGENTI2’ to enable the loading
of images from that directory. Then load LESSON4.TXT into
this or another text buffer. (with ‘r’)

* Congratulations on getting this far! The hard part is done! Now, moving forward,
you will easily understand, having entered the logic of ASM programming!
